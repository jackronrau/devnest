{"graph":{"../../components/icons.tsx":[],"../../components/page-header.tsx":["../../lib/utils.ts"],"../../components/password-input.tsx":["../../lib/utils.ts"],"../../components/shell.tsx":["../../lib/utils.ts"],"../../config/product.ts":["../../db/schema/index.ts","../../lib/id.ts"],"../../config/site.ts":["../../config/product.ts","../../lib/utils.ts","../../types/index.ts"],"../../db/schema/addresses.ts":["../../db/schema/utils.ts","../../lib/id.ts"],"../../db/schema/carts.ts":["../../db/schema/utils.ts","../../lib/id.ts","../../lib/validations/cart.ts"],"../../db/schema/categories.ts":["../../db/schema/products.ts","../../db/schema/subcategories.ts","../../db/schema/utils.ts","../../lib/id.ts"],"../../db/schema/customers.ts":["../../db/schema/stores.ts","../../db/schema/utils.ts","../../lib/id.ts"],"../../db/schema/index.ts":["../../db/schema/addresses.ts","../../db/schema/carts.ts","../../db/schema/categories.ts","../../db/schema/customers.ts","../../db/schema/notifications.ts","../../db/schema/orders.ts","../../db/schema/payments.ts","../../db/schema/products.ts","../../db/schema/stocks.ts","../../db/schema/stores.ts","../../db/schema/subcategories.ts","../../db/schema/tags.ts","../../db/schema/variants.ts"],"../../db/schema/notifications.ts":["../../db/schema/utils.ts","../../lib/id.ts"],"../../db/schema/orders.ts":["../../db/schema/addresses.ts","../../db/schema/stores.ts","../../db/schema/utils.ts","../../lib/id.ts","../../lib/validations/cart.ts"],"../../db/schema/payments.ts":["../../db/schema/stores.ts","../../db/schema/utils.ts","../../lib/id.ts"],"../../db/schema/products.ts":["../../db/schema/categories.ts","../../db/schema/stores.ts","../../db/schema/subcategories.ts","../../db/schema/tags.ts","../../db/schema/utils.ts","../../db/schema/variants.ts","../../lib/id.ts","../../types/index.ts"],"../../db/schema/stocks.ts":["../../db/schema/utils.ts","../../db/schema/variants.ts","../../lib/id.ts"],"../../db/schema/stores.ts":["../../db/schema/customers.ts","../../db/schema/payments.ts","../../db/schema/products.ts","../../db/schema/tags.ts","../../db/schema/utils.ts","../../db/schema/variants.ts","../../lib/id.ts"],"../../db/schema/subcategories.ts":["../../db/schema/categories.ts","../../db/schema/utils.ts","../../lib/id.ts"],"../../db/schema/tags.ts":["../../db/schema/products.ts","../../db/schema/stores.ts","../../db/schema/utils.ts","../../lib/id.ts"],"../../db/schema/utils.ts":[],"../../db/schema/variants.ts":["../../db/schema/products.ts","../../db/schema/stocks.ts","../../db/schema/stores.ts","../../db/schema/utils.ts","../../lib/id.ts"],"../../env.js":[],"../../hooks/use-mounted.ts":[],"../../lib/constants.ts":[],"../../lib/handle-error.ts":["../../lib/constants.ts"],"../../lib/id.ts":[],"../../lib/utils.ts":["../../env.js"],"../../lib/validations/auth.ts":[],"../../lib/validations/cart.ts":[],"../../types/index.ts":["../../components/icons.tsx","../../db/schema/index.ts"],"_components/logout-buttons.tsx":["../../hooks/use-mounted.ts","../../lib/utils.ts"],"_components/oauth-signin.tsx":["../../components/icons.tsx","../../lib/handle-error.ts"],"_components/reset-password-confirm-form.tsx":["../../components/icons.tsx","../../components/password-input.tsx","../../lib/handle-error.ts","../../lib/validations/auth.ts"],"_components/reset-password-form.tsx":["../../components/icons.tsx","../../lib/handle-error.ts","../../lib/validations/auth.ts"],"_components/signin-form.tsx":["../../components/icons.tsx","../../components/password-input.tsx","../../lib/handle-error.ts","../../lib/validations/auth.ts"],"_components/signup-form.tsx":["../../components/icons.tsx","../../components/password-input.tsx","../../lib/handle-error.ts","../../lib/validations/auth.ts"],"_components/sso-callback.tsx":["../../components/icons.tsx"],"_components/verify-email-form.tsx":["../../components/icons.tsx","../../lib/handle-error.ts","../../lib/validations/auth.ts"],"layout.tsx":["../../components/icons.tsx","../../config/site.ts"],"signin/[[...signin]]/page.tsx":["../../components/shell.tsx","../../env.js","_components/oauth-signin.tsx","_components/signin-form.tsx"],"signin/reset-password/[[...reset-password]]/page.tsx":["../../components/shell.tsx","../../env.js","_components/reset-password-form.tsx"],"signin/reset-password/confirm/[[...confirm]]/page.tsx":["../../components/shell.tsx","../../env.js","_components/reset-password-confirm-form.tsx"],"signout/[[...signout]]/page.tsx":["../../components/page-header.tsx","../../components/shell.tsx","../../env.js","_components/logout-buttons.tsx"],"signup/[[...signup]]/page.tsx":["../../components/shell.tsx","../../env.js","_components/oauth-signin.tsx","_components/signup-form.tsx"],"signup/verify-email/[[...verify-email]]/page.tsx":["../../components/shell.tsx","../../env.js","_components/verify-email-form.tsx"],"sso-callback/[[...sso-callback]]/page.tsx":["../../components/icons.tsx","../../components/shell.tsx"]},"entry":"C:\\Users\\Home\\Desktop\\skateshop-main\\src\\app\\(auth)","tsConfigPaths":{"@/*":["./src/*"],"contentlayer/generated":["./.contentlayer/generated"]},"srcPath":"C:\\Users\\Home\\Desktop\\skateshop-main\\src","sep":"\\","usedShadcnComponents":["@/components/ui/card","@/components/ui/button","@/components/ui/form","@/components/ui/input-otp","@/components/ui/input","@/components/ui/skeleton"],"usedCoreModules":[],"usedThirdPartyModules":[],"commonDirectory":"C:\\Users\\Home\\Desktop\\skateshop-main\\src","usedModulesContent":[["C:\\Users\\Home\\Desktop\\skateshop-main\\src\\app\\(auth)\\layout.tsx",{"content":"import Image from \"next/image\"\nimport Link from \"next/link\"\n\nimport { siteConfig } from \"@/config/site\"\nimport { Icons } from \"@/components/icons\"\n\nexport default function AuthLayout({ children }: React.PropsWithChildren) {\n  return (\n    <div className=\"relative grid min-h-screen grid-cols-1 overflow-hidden lg:grid-cols-2\">\n      <Link\n        href=\"/\"\n        className=\"absolute left-8 top-6 z-20 flex items-center text-lg font-bold tracking-tight text-foreground/80 transition-colors hover:text-foreground\"\n      >\n        <Icons.logo className=\"mr-2 size-6\" aria-hidden=\"true\" />\n        <span>{siteConfig.name}</span>\n      </Link>\n      <main className=\"absolute left-1/2 top-1/2 flex w-full -translate-x-1/2 -translate-y-1/2 items-center lg:static lg:left-0 lg:top-0 lg:flex lg:translate-x-0 lg:translate-y-0\">\n        {children}\n      </main>\n      <div className=\"relative aspect-video size-full\">\n        <Image\n          src=\"/images/auth-layout.webp\"\n          alt=\"A skateboarder dropping into a bowl\"\n          fill\n          className=\"absolute inset-0 object-cover\"\n          priority\n          sizes=\"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw\"\n        />\n        <div className=\"absolute inset-0 bg-gradient-to-t from-background to-black/80 lg:to-black/40\" />\n        <div className=\"absolute bottom-4 right-4 z-20 line-clamp-1 rounded-md bg-muted px-3 py-1.5 text-sm text-muted-foreground\">\n          Photo by{\" \"}\n          <a\n            href=\"https://unsplash.com/ja/@pixelperfektion?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\"\n            className=\"underline transition-colors hover:text-foreground\"\n          >\n            pixelperfektion\n          </a>\n          {\" on \"}\n          <a\n            href=\"https://unsplash.com/photos/OS2WODdxy1A?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\"\n            className=\"underline transition-colors hover:text-foreground\"\n          >\n            Unsplash\n          </a>\n        </div>\n      </div>\n    </div>\n  )\n}\n"}],["C:\\Users\\Home\\Desktop\\skateshop-main\\src\\config\\site.ts",{"content":"import type { FooterItem, MainNavItem } from \"@/types\"\n\nimport { productConfig } from \"@/config/product\"\nimport { slugify } from \"@/lib/utils\"\n\nexport type SiteConfig = typeof siteConfig\n\nconst links = {\n  x: \"https://twitter.com/sadmann17\",\n  github: \"https://github.com/sadmann7/skateshop\",\n  githubAccount: \"https://github.com/sadmann7\",\n  discord: \"https://discord.com/users/sadmann7\",\n  calDotCom: \"https://cal.com/sadmann7\",\n}\n\nexport const siteConfig = {\n  name: \"Skateshop\",\n  description:\n    \"An open source e-commerce skateshop build with everything new in Next.js.\",\n  url: \"https://skateshop.sadmn.com\",\n  ogImage: \"https://skateshop.sadmn.com/opengraph-image.png\",\n  links,\n  mainNav: [\n    {\n      title: \"Lobby\",\n      items: [\n        {\n          title: \"Products\",\n          href: \"/products\",\n          description: \"All the products we have to offer.\",\n          items: [],\n        },\n        {\n          title: \"Build a Board\",\n          href: \"/build-a-board\",\n          description: \"Build your own custom skateboard.\",\n          items: [],\n        },\n        {\n          title: \"Blog\",\n          href: \"/blog\",\n          description: \"Read our latest blog posts.\",\n          items: [],\n        },\n      ],\n    },\n    ...productConfig.categories.map((category) => ({\n      title: category.name,\n      items: [\n        {\n          title: \"All\",\n          href: `/categories/${slugify(category.name)}`,\n          description: `All ${category.name}.`,\n          items: [],\n        },\n        ...category.subcategories.map((subcategory) => ({\n          title: subcategory.name,\n          href: `/categories/${slugify(category.name)}/${slugify(subcategory.name)}`,\n          description: subcategory.description,\n          items: [],\n        })),\n      ],\n    })),\n  ] satisfies MainNavItem[],\n  footerNav: [\n    {\n      title: \"Credits\",\n      items: [\n        {\n          title: \"OneStopShop\",\n          href: \"https://onestopshop.jackblatch.com\",\n          external: true,\n        },\n        {\n          title: \"Acme Corp\",\n          href: \"https://acme-corp.jumr.dev\",\n          external: true,\n        },\n        {\n          title: \"craft.mxkaske.dev\",\n          href: \"https://craft.mxkaske.dev\",\n          external: true,\n        },\n        {\n          title: \"Taxonomy\",\n          href: \"https://tx.shadcn.com/\",\n          external: true,\n        },\n        {\n          title: \"shadcn/ui\",\n          href: \"https://ui.shadcn.com\",\n          external: true,\n        },\n      ],\n    },\n    {\n      title: \"Help\",\n      items: [\n        {\n          title: \"About\",\n          href: \"/about\",\n          external: false,\n        },\n        {\n          title: \"Contact\",\n          href: \"/contact\",\n          external: false,\n        },\n        {\n          title: \"Terms\",\n          href: \"/terms\",\n          external: false,\n        },\n        {\n          title: \"Privacy\",\n          href: \"/privacy\",\n          external: false,\n        },\n      ],\n    },\n    {\n      title: \"Social\",\n      items: [\n        {\n          title: \"X\",\n          href: links.x,\n          external: true,\n        },\n        {\n          title: \"GitHub\",\n          href: links.githubAccount,\n          external: true,\n        },\n        {\n          title: \"Discord\",\n          href: links.discord,\n          external: true,\n        },\n        {\n          title: \"cal.com\",\n          href: links.calDotCom,\n          external: true,\n        },\n      ],\n    },\n    {\n      title: \"Lofi\",\n      items: [\n        {\n          title: \"beats to study to\",\n          href: \"https://www.youtube.com/watch?v=jfKfPfyJRdk\",\n          external: true,\n        },\n        {\n          title: \"beats to chill to\",\n          href: \"https://www.youtube.com/watch?v=rUxyKA_-grg\",\n          external: true,\n        },\n        {\n          title: \"a fresh start\",\n          href: \"https://www.youtube.com/watch?v=rwionZbOryo\",\n          external: true,\n        },\n        {\n          title: \"coffee to go\",\n          href: \"https://www.youtube.com/watch?v=2gliGzb2_1I\",\n          external: true,\n        },\n      ],\n    },\n  ] satisfies FooterItem[],\n}\n","originalImport":"@/config/site","alias":true}],["C:\\Users\\Home\\Desktop\\skateshop-main\\src\\components\\icons.tsx",{"content":"import {\n  AvatarIcon,\n  ChevronLeftIcon,\n  GearIcon,\n  HomeIcon,\n  ImageIcon,\n} from \"@radix-ui/react-icons\"\n\nexport type IconProps = React.HTMLAttributes<SVGElement>\n\nexport const Icons = {\n  logo: (props: IconProps) => (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      strokeWidth=\"1.5\"\n      stroke=\"currentColor\"\n      fill=\"none\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      {...props}\n    >\n      <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <circle cx=\"7\" cy=\"15\" r=\"2\" />\n      <circle cx=\"17\" cy=\"15\" r=\"2\" />\n      <path d=\"M3 9a2 1 0 0 0 2 1h14a2 1 0 0 0 2 -1\" />\n    </svg>\n  ),\n  menu: ({ ...props }: IconProps) => (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      strokeWidth=\"1.5\"\n      {...props}\n    >\n      <path\n        d=\"M3 5H11\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      ></path>\n      <path\n        d=\"M3 12H16\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      ></path>\n      <path\n        d=\"M3 19H21\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      ></path>\n    </svg>\n  ),\n  nextjs: (props: IconProps) => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" {...props}>\n      <path\n        fill=\"currentColor\"\n        d=\"M11.572 0c-.176 0-.31.001-.358.007a19.76 19.76 0 0 1-.364.033C7.443.346 4.25 2.185 2.228 5.012a11.875 11.875 0 0 0-2.119 5.243c-.096.659-.108.854-.108 1.747s.012 1.089.108 1.748c.652 4.506 3.86 8.292 8.209 9.695.779.25 1.6.422 2.534.525.363.04 1.935.04 2.299 0 1.611-.178 2.977-.577 4.323-1.264.207-.106.247-.134.219-.158-.02-.013-.9-1.193-1.955-2.62l-1.919-2.592-2.404-3.558a338.739 338.739 0 0 0-2.422-3.556c-.009-.002-.018 1.579-.023 3.51-.007 3.38-.01 3.515-.052 3.595a.426.426 0 0 1-.206.214c-.075.037-.14.044-.495.044H7.81l-.108-.068a.438.438 0 0 1-.157-.171l-.05-.106.006-4.703.007-4.705.072-.092a.645.645 0 0 1 .174-.143c.096-.047.134-.051.54-.051.478 0 .558.018.682.154.035.038 1.337 1.999 2.895 4.361a10760.433 10760.433 0 0 0 4.735 7.17l1.9 2.879.096-.063a12.317 12.317 0 0 0 2.466-2.163 11.944 11.944 0 0 0 2.824-6.134c.096-.66.108-.854.108-1.748 0-.893-.012-1.088-.108-1.747-.652-4.506-3.859-8.292-8.208-9.695a12.597 12.597 0 0 0-2.499-.523A33.119 33.119 0 0 0 11.573 0zm4.069 7.217c.347 0 .408.005.486.047a.473.473 0 0 1 .237.277c.018.06.023 1.365.018 4.304l-.006 4.218-.744-1.14-.746-1.14v-3.066c0-1.982.01-3.097.023-3.15a.478.478 0 0 1 .233-.296c.096-.05.13-.054.5-.054z\"\n      />\n    </svg>\n  ),\n  gitHub: (props: IconProps) => (\n    <svg viewBox=\"0 0 438.549 438.549\" {...props}>\n      <path\n        fill=\"currentColor\"\n        d=\"M409.132 114.573c-19.608-33.596-46.205-60.194-79.798-79.8-33.598-19.607-70.277-29.408-110.063-29.408-39.781 0-76.472 9.804-110.063 29.408-33.596 19.605-60.192 46.204-79.8 79.8C9.803 148.168 0 184.854 0 224.63c0 47.78 13.94 90.745 41.827 128.906 27.884 38.164 63.906 64.572 108.063 79.227 5.14.954 8.945.283 11.419-1.996 2.475-2.282 3.711-5.14 3.711-8.562 0-.571-.049-5.708-.144-15.417a2549.81 2549.81 0 01-.144-25.406l-6.567 1.136c-4.187.767-9.469 1.092-15.846 1-6.374-.089-12.991-.757-19.842-1.999-6.854-1.231-13.229-4.086-19.13-8.559-5.898-4.473-10.085-10.328-12.56-17.556l-2.855-6.57c-1.903-4.374-4.899-9.233-8.992-14.559-4.093-5.331-8.232-8.945-12.419-10.848l-1.999-1.431c-1.332-.951-2.568-2.098-3.711-3.429-1.142-1.331-1.997-2.663-2.568-3.997-.572-1.335-.098-2.43 1.427-3.289 1.525-.859 4.281-1.276 8.28-1.276l5.708.853c3.807.763 8.516 3.042 14.133 6.851 5.614 3.806 10.229 8.754 13.846 14.842 4.38 7.806 9.657 13.754 15.846 17.847 6.184 4.093 12.419 6.136 18.699 6.136 6.28 0 11.704-.476 16.274-1.423 4.565-.952 8.848-2.383 12.847-4.285 1.713-12.758 6.377-22.559 13.988-29.41-10.848-1.14-20.601-2.857-29.264-5.14-8.658-2.286-17.605-5.996-26.835-11.14-9.235-5.137-16.896-11.516-22.985-19.126-6.09-7.614-11.088-17.61-14.987-29.979-3.901-12.374-5.852-26.648-5.852-42.826 0-23.035 7.52-42.637 22.557-58.817-7.044-17.318-6.379-36.732 1.997-58.24 5.52-1.715 13.706-.428 24.554 3.853 10.85 4.283 18.794 7.952 23.84 10.994 5.046 3.041 9.089 5.618 12.135 7.708 17.705-4.947 35.976-7.421 54.818-7.421s37.117 2.474 54.823 7.421l10.849-6.849c7.419-4.57 16.18-8.758 26.262-12.565 10.088-3.805 17.802-4.853 23.134-3.138 8.562 21.509 9.325 40.922 2.279 58.24 15.036 16.18 22.559 35.787 22.559 58.817 0 16.178-1.958 30.497-5.853 42.966-3.9 12.471-8.941 22.457-15.125 29.979-6.191 7.521-13.901 13.85-23.131 18.986-9.232 5.14-18.182 8.85-26.84 11.136-8.662 2.286-18.415 4.004-29.263 5.146 9.894 8.562 14.842 22.077 14.842 40.539v60.237c0 3.422 1.19 6.279 3.572 8.562 2.379 2.279 6.136 2.95 11.276 1.995 44.163-14.653 80.185-41.062 108.068-79.226 27.88-38.161 41.825-81.126 41.825-128.906-.01-39.771-9.818-76.454-29.414-110.049z\"\n      ></path>\n    </svg>\n  ),\n  google: ({ ...props }: IconProps) => (\n    <svg role=\"img\" viewBox=\"0 0 24 24\" {...props}>\n      <path\n        fill=\"currentColor\"\n        d=\"M12.48 10.92v3.28h7.84c-.24 1.84-.853 3.187-1.787 4.133-1.147 1.147-2.933 2.4-6.053 2.4-4.827 0-8.6-3.893-8.6-8.72s3.773-8.72 8.6-8.72c2.6 0 4.507 1.027 5.907 2.347l2.307-2.307C18.747 1.44 16.133 0 12.48 0 5.867 0 .307 5.387.307 12s5.56 12 12.173 12c3.573 0 6.267-1.173 8.373-3.36 2.16-2.16 2.84-5.213 2.84-7.667 0-.76-.053-1.467-.173-2.053H12.48z\"\n      />\n    </svg>\n  ),\n  x: (props: IconProps) => (\n    <svg\n      width=\"23\"\n      height=\"23\"\n      viewBox=\"0 0 1200 1227\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path d=\"M714.163 519.284L1160.89 0H1055.03L667.137 450.887L357.328 0H0L468.492 681.821L0 1226.37H105.866L515.491 750.218L842.672 1226.37H1200L714.137 519.284H714.163ZM569.165 687.828L521.697 619.934L144.011 79.6944H306.615L611.412 515.685L658.88 583.579L1055.08 1150.3H892.476L569.165 687.854V687.828Z\" />\n    </svg>\n  ),\n  facebook: ({ ...props }: IconProps) => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 320 512\" {...props}>\n      <path\n        fill=\"currentColor\"\n        d=\"M279.14 288l14.22-92.66h-88.91v-60.13c0-25.35 12.42-50.06 52.24-50.06h40.42V6.26S260.43 0 225.36 0c-73.22 0-121.08 44.38-121.08 124.72v70.62H22.89V288h81.39v224h100.17V288z\"\n      />\n    </svg>\n  ),\n  discord: ({ ...props }: IconProps) => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 640 512\" {...props}>\n      <path\n        fill=\"currentColor\"\n        d=\"M524.531,69.836a1.5,1.5,0,0,0-.764-.7A485.065,485.065,0,0,0,404.081,32.03a1.816,1.816,0,0,0-1.923.91,337.461,337.461,0,0,0-14.9,30.6,447.848,447.848,0,0,0-134.426,0,309.541,309.541,0,0,0-15.135-30.6,1.89,1.89,0,0,0-1.924-.91A483.689,483.689,0,0,0,116.085,69.137a1.712,1.712,0,0,0-.788.676C39.068,183.651,18.186,294.69,28.43,404.354a2.016,2.016,0,0,0,.765,1.375A487.666,487.666,0,0,0,176.02,479.918a1.9,1.9,0,0,0,2.063-.676A348.2,348.2,0,0,0,208.12,430.4a1.86,1.86,0,0,0-1.019-2.588,321.173,321.173,0,0,1-45.868-21.853,1.885,1.885,0,0,1-.185-3.126c3.082-2.309,6.166-4.711,9.109-7.137a1.819,1.819,0,0,1,1.9-.256c96.229,43.917,200.41,43.917,295.5,0a1.812,1.812,0,0,1,1.924.233c2.944,2.426,6.027,4.851,9.132,7.16a1.884,1.884,0,0,1-.162,3.126,301.407,301.407,0,0,1-45.89,21.83,1.875,1.875,0,0,0-1,2.611,391.055,391.055,0,0,0,30.014,48.815,1.864,1.864,0,0,0,2.063.7A486.048,486.048,0,0,0,610.7,405.729a1.882,1.882,0,0,0,.765-1.352C623.729,277.594,590.933,167.465,524.531,69.836ZM222.491,337.58c-28.972,0-52.844-26.587-52.844-59.239S193.056,219.1,222.491,219.1c29.665,0,53.306,26.82,52.843,59.239C275.334,310.993,251.924,337.58,222.491,337.58Zm195.38,0c-28.971,0-52.843-26.587-52.843-59.239S388.437,219.1,417.871,219.1c29.667,0,53.307,26.82,52.844,59.239C470.715,310.993,447.538,337.58,417.871,337.58Z\"\n      />\n    </svg>\n  ),\n  spinner: (props: IconProps) => (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      {...props}\n    >\n      <path d=\"M21 12a9 9 0 1 1-6.219-8.56\" />\n    </svg>\n  ),\n  cart: (props: IconProps) => (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      {...props}\n    >\n      <circle cx=\"8\" cy=\"21\" r=\"1\" />\n      <circle cx=\"19\" cy=\"21\" r=\"1\" />\n      <path d=\"M2.05 2.05h2l2.66 12.42a2 2 0 0 0 2 1.58h9.78a2 2 0 0 0 1.95-1.57l1.65-7.43H5.12\" />\n    </svg>\n  ),\n  product: (props: IconProps) => (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      {...props}\n    >\n      <path d=\"M21 8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16Z\" />\n      <path d=\"m3.3 7 8.7 5 8.7-5\" />\n      <path d=\"M12 22V12\" />\n    </svg>\n  ),\n  store: (props: IconProps) => (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      {...props}\n    >\n      <path d=\"m2 7 4.41-4.41A2 2 0 0 1 7.83 2h8.34a2 2 0 0 1 1.42.59L22 7\" />\n      <path d=\"M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8\" />\n      <path d=\"M15 22v-4a2 2 0 0 0-2-2h-2a2 2 0 0 0-2 2v4\" />\n      <path d=\"M2 7h20\" />\n      <path d=\"M22 7v3a2 2 0 0 1-2 2v0a2.7 2.7 0 0 1-1.59-.63.7.7 0 0 0-.82 0A2.7 2.7 0 0 1 16 12a2.7 2.7 0 0 1-1.59-.63.7.7 0 0 0-.82 0A2.7 2.7 0 0 1 12 12a2.7 2.7 0 0 1-1.59-.63.7.7 0 0 0-.82 0A2.7 2.7 0 0 1 8 12a2.7 2.7 0 0 1-1.59-.63.7.7 0 0 0-.82 0A2.7 2.7 0 0 1 4 12v0a2 2 0 0 1-2-2V7\" />\n    </svg>\n  ),\n  users: (props: IconProps) => (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      {...props}\n    >\n      <path d=\"M18 21a8 8 0 0 0-16 0\" />\n      <circle cx=\"10\" cy=\"8\" r=\"5\" />\n      <path d=\"M22 20c0-3.37-2-6.5-4-8a5 5 0 0 0-.45-8.3\" />\n    </svg>\n  ),\n  credit: (props: IconProps) => (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      {...props}\n    >\n      <rect width=\"20\" height=\"14\" x=\"2\" y=\"5\" rx=\"2\" />\n      <line x1=\"2\" x2=\"22\" y1=\"10\" y2=\"10\" />\n    </svg>\n  ),\n  dollarSign: (props: IconProps) => (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      {...props}\n    >\n      <line x1=\"12\" x2=\"12\" y1=\"2\" y2=\"22\" />\n      <path d=\"M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6\" />\n    </svg>\n  ),\n  activity: (props: IconProps) => (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      {...props}\n    >\n      <path d=\"M22 12h-4l-3 9L9 3l-3 9H2\" />\n    </svg>\n  ),\n  bot: (props: IconProps) => (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      {...props}\n    >\n      <path d=\"M12 8V4H8\" />\n      <rect width=\"16\" height=\"12\" x=\"4\" y=\"8\" rx=\"2\" />\n      <path d=\"M2 14h2\" />\n      <path d=\"M20 14h2\" />\n      <path d=\"M15 13v2\" />\n      <path d=\"M9 13v2\" />\n    </svg>\n  ),\n  robot: (props: IconProps) => (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      {...props}\n    >\n      <rect width=\"18\" height=\"10\" x=\"3\" y=\"11\" rx=\"2\" />\n      <circle cx=\"12\" cy=\"5\" r=\"2\" />\n      <path d=\"M12 7v4\" />\n      <line x1=\"8\" x2=\"8\" y1=\"16\" y2=\"16\" />\n      <line x1=\"16\" x2=\"16\" y1=\"16\" y2=\"16\" />\n    </svg>\n  ),\n  javascript: (props: IconProps) => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\" {...props}>\n      <path\n        fill=\"currentColor\"\n        d=\"M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48zM243.8 381.4c0 43.6-25.6 63.5-62.9 63.5-33.7 0-53.2-17.4-63.2-38.5l34.3-20.7c6.6 11.7 12.6 21.6 27.1 21.6 13.8 0 22.6-5.4 22.6-26.5V237.7h42.1v143.7zm99.6 63.5c-39.1 0-64.4-18.6-76.7-43l34.3-19.8c9 14.7 20.8 25.6 41.5 25.6 17.4 0 28.6-8.7 28.6-20.8 0-14.4-11.4-19.5-30.7-28l-10.5-4.5c-30.4-12.9-50.5-29.2-50.5-63.5 0-31.6 24.1-55.6 61.6-55.6 26.8 0 46 9.3 59.8 33.7L368 290c-7.2-12.9-15-18-27.1-18-12.3 0-20.1 7.8-20.1 18 0 12.6 7.8 17.7 25.9 25.6l10.5 4.5c35.8 15.3 55.9 31 55.9 66.2 0 37.8-29.8 58.6-69.7 58.6z\"\n      />\n    </svg>\n  ),\n  typescript: (props: IconProps) => (\n    <svg\n      role=\"img\"\n      viewBox=\"0 0 24 24\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path\n        fill=\"currentColor\"\n        d=\"M1.125 0C.502 0 0 .502 0 1.125v21.75C0 23.498.502 24 1.125 24h21.75c.623 0 1.125-.502 1.125-1.125V1.125C24 .502 23.498 0 22.875 0zm17.363 9.75c.612 0 1.154.037 1.627.111a6.38 6.38 0 0 1 1.306.34v2.458a3.95 3.95 0 0 0-.643-.361 5.093 5.093 0 0 0-.717-.26 5.453 5.453 0 0 0-1.426-.2c-.3 0-.573.028-.819.086a2.1 2.1 0 0 0-.623.242c-.17.104-.3.229-.393.374a.888.888 0 0 0-.14.49c0 .196.053.373.156.529.104.156.252.304.443.444s.423.276.696.41c.273.135.582.274.926.416.47.197.892.407 1.266.628.374.222.695.473.963.753.268.279.472.598.614.957.142.359.214.776.214 1.253 0 .657-.125 1.21-.373 1.656a3.033 3.033 0 0 1-1.012 1.085 4.38 4.38 0 0 1-1.487.596c-.566.12-1.163.18-1.79.18a9.916 9.916 0 0 1-1.84-.164 5.544 5.544 0 0 1-1.512-.493v-2.63a5.033 5.033 0 0 0 3.237 1.2c.333 0 .624-.03.872-.09.249-.06.456-.144.623-.25.166-.108.29-.234.373-.38a1.023 1.023 0 0 0-.074-1.089 2.12 2.12 0 0 0-.537-.5 5.597 5.597 0 0 0-.807-.444 27.72 27.72 0 0 0-1.007-.436c-.918-.383-1.602-.852-2.053-1.405-.45-.553-.676-1.222-.676-2.005 0-.614.123-1.141.369-1.582.246-.441.58-.804 1.004-1.089a4.494 4.494 0 0 1 1.47-.629 7.536 7.536 0 0 1 1.77-.201zm-15.113.188h9.563v2.166H9.506v9.646H6.789v-9.646H3.375z\"\n      />\n    </svg>\n  ),\n  bash: (props: IconProps) => (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      {...props}\n    >\n      <path d=\"M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z\" />\n      <path d=\"M14 2v4a2 2 0 0 0 2 2h4\" />\n      <path d=\"m8 16 2-2-2-2\" />\n      <path d=\"M12 18h4\" />\n    </svg>\n  ),\n  analytics: (props: IconProps) => (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      {...props}\n    >\n      <path d=\"M3 3v18h18\" />\n      <path d=\"m19 9-5 5-4-4-3 3\" />\n    </svg>\n  ),\n  dashboard: HomeIcon,\n  avatar: AvatarIcon,\n  placeholder: ImageIcon,\n  settings: GearIcon,\n  chevronLeft: ChevronLeftIcon,\n}\n","originalImport":"@/components/icons","alias":true}],["C:\\Users\\Home\\Desktop\\skateshop-main\\src\\types\\index.ts",{"content":"import { type Store } from \"@/db/schema\"\nimport { type SQL } from \"drizzle-orm\"\nimport type Stripe from \"stripe\"\nimport { type ClientUploadedFileData } from \"uploadthing/types\"\n\nimport type { Icons } from \"@/components/icons\"\n\nexport interface NavItem {\n  title: string\n  href?: string\n  active?: boolean\n  disabled?: boolean\n  external?: boolean\n  icon?: keyof typeof Icons\n  label?: string\n  description?: string\n}\n\nexport interface NavItemWithChildren extends NavItem {\n  items?: NavItemWithChildren[]\n}\n\nexport interface FooterItem {\n  title: string\n  items: {\n    title: string\n    href: string\n    external?: boolean\n  }[]\n}\n\nexport type MainNavItem = NavItemWithChildren\n\nexport type SidebarNavItem = NavItemWithChildren\n\nexport interface SearchParams {\n  [key: string]: string | string[] | undefined\n}\n\nexport interface UploadedFile<T = unknown> extends ClientUploadedFileData<T> {}\n\nexport interface StoredFile {\n  id: string\n  name: string\n  url: string\n}\n\nexport interface Option {\n  label: string\n  value: string\n  icon?: React.ComponentType<{ className?: string }>\n  withCount?: boolean\n}\n\nexport interface DataTableFilterField<TData> {\n  label: string\n  value: keyof TData\n  placeholder?: string\n  options?: Option[]\n}\n\nexport type DrizzleWhere<T> =\n  | SQL<unknown>\n  | ((aliases: T) => SQL<T> | undefined)\n  | undefined\n\nexport type StripePaymentStatus = Stripe.PaymentIntent.Status\n\nexport interface Plan {\n  id: Store[\"plan\"]\n  title: string\n  description: string\n  features: string[]\n  stripePriceId: string\n  limits: {\n    stores: number\n    products: number\n    tags: number\n    variants: number\n  }\n}\n\nexport interface PlanWithPrice extends Plan {\n  price: string\n}\n\nexport interface UserPlan extends Plan {\n  stripeSubscriptionId?: string | null\n  stripeCurrentPeriodEnd?: string | null\n  stripeCustomerId?: string | null\n  isSubscribed: boolean\n  isCanceled: boolean\n  isActive: boolean\n}\n","originalImport":"@/types","alias":true}],["C:\\Users\\Home\\Desktop\\skateshop-main\\src\\config\\product.ts",{"content":"import type { Category, Subcategory } from \"@/db/schema\"\n\nimport { generateId } from \"@/lib/id\"\n\nexport type ProductConfig = typeof productConfig\n\nexport const productConfig = {\n  categories: [\n    {\n      id: generateId(),\n      name: \"Skateboards\",\n      description: \"The best skateboards for all levels of skaters.\",\n      image: \"/images/categories/skateboard-one.webp\",\n      subcategories: [\n        {\n          id: generateId(),\n          name: \"Decks\",\n          description: \"The board itself.\",\n        },\n        {\n          id: generateId(),\n          name: \"Wheels\",\n          description: \"The wheels that go on the board.\",\n        },\n        {\n          id: generateId(),\n          name: \"Trucks\",\n          description: \"The trucks that go on the board.\",\n        },\n        {\n          id: generateId(),\n          name: \"Bearings\",\n          description: \"The bearings that go in the wheels.\",\n        },\n        {\n          id: generateId(),\n          name: \"Griptape\",\n          description: \"The griptape that goes on the board.\",\n        },\n        {\n          id: generateId(),\n          name: \"Hardware\",\n          description: \"The hardware that goes on the board.\",\n        },\n        {\n          id: generateId(),\n          name: \"Tools\",\n          description: \"The tools that go with the board.\",\n        },\n      ],\n    },\n    {\n      id: generateId(),\n      name: \"Clothing\",\n      description: \"Stylish and comfortable skateboarding clothing.\",\n      image: \"/images/categories/clothing-one.webp\",\n      subcategories: [\n        {\n          id: generateId(),\n          name: \"T-shirts\",\n          description: \"Cool and comfy tees for effortless style.\",\n        },\n        {\n          id: generateId(),\n          name: \"Hoodies\",\n          description: \"Cozy up in trendy hoodies.\",\n        },\n        {\n          id: generateId(),\n          name: \"Pants\",\n          description: \"Relaxed and stylish pants for everyday wear.\",\n        },\n        {\n          id: generateId(),\n          name: \"Shorts\",\n          description: \"Stay cool with casual and comfortable shorts.\",\n        },\n        {\n          id: generateId(),\n          name: \"Hats\",\n          description: \"Top off your look with stylish and laid-back hats.\",\n        },\n      ],\n    },\n    {\n      id: generateId(),\n      name: \"Shoes\",\n      description: \"Rad shoes for long skate sessions.\",\n      image: \"/images/categories/shoes-one.webp\",\n      subcategories: [\n        {\n          id: generateId(),\n          name: \"Low Tops\",\n          description: \"Rad low tops shoes for a stylish low-profile look.\",\n        },\n        {\n          id: generateId(),\n          name: \"High Tops\",\n          description: \"Elevate your style with rad high top shoes.\",\n        },\n        {\n          id: generateId(),\n          name: \"Slip-ons\",\n          description: \"Effortless style with rad slip-on shoes.\",\n        },\n        {\n          id: generateId(),\n          name: \"Pros\",\n          description: \"Performance-driven rad shoes for the pros.\",\n        },\n        {\n          id: generateId(),\n          name: \"Classics\",\n          description: \"Timeless style with rad classic shoes.\",\n        },\n      ],\n    },\n    {\n      id: generateId(),\n      name: \"Accessories\",\n      description:\n        \"The essential skateboarding accessories to keep you rolling.\",\n      image: \"/images/categories/backpack-one.webp\",\n      subcategories: [\n        {\n          id: generateId(),\n          name: \"Skate Tools\",\n          description:\n            \"Essential tools for maintaining your skateboard, all rad.\",\n        },\n        {\n          id: generateId(),\n          name: \"Bushings\",\n          description: \"Upgrade your ride with our rad selection of bushings.\",\n        },\n        {\n          id: generateId(),\n          name: \"Shock & Riser Pads\",\n          description:\n            \"Enhance your skateboard's performance with rad shock and riser pads.\",\n        },\n        {\n          id: generateId(),\n          name: \"Skate Rails\",\n          description:\n            \"Add creativity and style to your tricks with our rad skate rails.\",\n        },\n        {\n          id: generateId(),\n          name: \"Wax\",\n          description:\n            \"Keep your board gliding smoothly with our rad skate wax.\",\n        },\n        {\n          id: generateId(),\n          name: \"Socks\",\n          description: \"Keep your feet comfy and stylish with our rad socks.\",\n        },\n        {\n          id: generateId(),\n          name: \"Backpacks\",\n          description: \"Carry your gear in style with our rad backpacks.\",\n        },\n      ],\n    },\n  ] satisfies ({\n    subcategories: Omit<\n      Subcategory,\n      \"slug\" | \"categoryId\" | \"createdAt\" | \"updatedAt\"\n    >[]\n  } & Pick<Category, \"id\" | \"name\" | \"description\" | \"image\">)[],\n}\n","originalImport":"@/config/product","alias":true}],["C:\\Users\\Home\\Desktop\\skateshop-main\\src\\lib\\utils.ts",{"content":"import { env } from \"@/env.js\"\nimport type { User } from \"@clerk/nextjs/server\"\nimport { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function absoluteUrl(path: string) {\n  return `${env.NEXT_PUBLIC_APP_URL}${path}`\n}\n\nexport function formatPrice(\n  price: number | string,\n  opts: Intl.NumberFormatOptions = {}\n) {\n  return new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: opts.currency ?? \"USD\",\n    notation: opts.notation ?? \"compact\",\n    ...opts,\n  }).format(Number(price))\n}\n\nexport function formatNumber(\n  number: number | string,\n  opts: Intl.NumberFormatOptions = {}\n) {\n  return new Intl.NumberFormat(\"en-US\", {\n    style: opts.style ?? \"decimal\",\n    notation: opts.notation ?? \"standard\",\n    minimumFractionDigits: opts.minimumFractionDigits ?? 0,\n    maximumFractionDigits: opts.maximumFractionDigits ?? 2,\n    ...opts,\n  }).format(Number(number))\n}\n\nexport function formatDate(\n  date: Date | string | number,\n  opts: Intl.DateTimeFormatOptions = {}\n) {\n  return new Intl.DateTimeFormat(\"en-US\", {\n    month: opts.month ?? \"long\",\n    day: opts.day ?? \"numeric\",\n    year: opts.year ?? \"numeric\",\n    ...opts,\n  }).format(new Date(date))\n}\n\nexport function formatBytes(\n  bytes: number,\n  decimals = 0,\n  sizeType: \"accurate\" | \"normal\" = \"normal\"\n) {\n  const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\"]\n  const accurateSizes = [\"Bytes\", \"KiB\", \"MiB\", \"GiB\", \"TiB\"]\n  if (bytes === 0) return \"0 Byte\"\n  const i = Math.floor(Math.log(bytes) / Math.log(1024))\n  return `${(bytes / Math.pow(1024, i)).toFixed(decimals)} ${\n    sizeType === \"accurate\"\n      ? (accurateSizes[i] ?? \"Bytest\")\n      : (sizes[i] ?? \"Bytes\")\n  }`\n}\n\nexport function formatId(id: string) {\n  return `#${id.toString().padStart(4, \"0\")}`\n}\n\nexport function slugify(str: string) {\n  return str\n    .toLowerCase()\n    .replace(/ /g, \"-\")\n    .replace(/[^\\w-]+/g, \"\")\n    .replace(/--+/g, \"-\")\n}\n\nexport function unslugify(str: string) {\n  return str.replace(/-/g, \" \")\n}\n\nexport function toTitleCase(str: string) {\n  return str.replace(\n    /\\w\\S*/g,\n    (txt) => txt.charAt(0).toUpperCase() + txt.slice(1).toLowerCase()\n  )\n}\n\nexport function toSentenceCase(str: string) {\n  return str\n    .replace(/([A-Z])/g, \" $1\")\n    .replace(/^./, (str) => str.toUpperCase())\n}\n\nexport function truncate(str: string, length: number) {\n  return str.length > length ? `${str.substring(0, length)}...` : str\n}\n\nexport function getUserEmail(user: User | null) {\n  const email =\n    user?.emailAddresses?.find((e) => e.id === user.primaryEmailAddressId)\n      ?.emailAddress ?? \"\"\n\n  return email\n}\n\nexport function isMacOs() {\n  if (typeof window === \"undefined\") return false\n\n  return window.navigator.userAgent.includes(\"Mac\")\n}\n","originalImport":"@/lib/utils","alias":true}],["C:\\Users\\Home\\Desktop\\skateshop-main\\src\\db\\schema\\index.ts",{"content":"export * from \"./addresses\"\nexport * from \"./carts\"\nexport * from \"./categories\"\nexport * from \"./customers\"\nexport * from \"./notifications\"\nexport * from \"./orders\"\nexport * from \"./payments\"\nexport * from \"./products\"\nexport * from \"./stocks\"\nexport * from \"./stores\"\nexport * from \"./subcategories\"\nexport * from \"./tags\"\nexport * from \"./variants\"\n","originalImport":"@/db/schema","alias":true}],["C:\\Users\\Home\\Desktop\\skateshop-main\\src\\db\\schema\\addresses.ts",{"content":"import { pgTable, text, varchar } from \"drizzle-orm/pg-core\"\n\nimport { generateId } from \"@/lib/id\"\n\nimport { lifecycleDates } from \"./utils\"\n\n// @see: https://github.com/jackblatch/OneStopShop/blob/main/db/schema.ts\nexport const addresses = pgTable(\"addresses\", {\n  id: varchar(\"id\", { length: 30 })\n    .$defaultFn(() => generateId())\n    .primaryKey(), // prefix_ + nanoid (12)\n  line1: text(\"line1\"),\n  line2: text(\"line2\"),\n  city: text(\"city\"),\n  state: text(\"state\"),\n  postalCode: text(\"postal_code\"),\n  country: text(\"country\"),\n  ...lifecycleDates,\n})\n\nexport type Address = typeof addresses.$inferSelect\nexport type NewAddress = typeof addresses.$inferInsert\n","originalImport":"./addresses","alias":false}],["C:\\Users\\Home\\Desktop\\skateshop-main\\src\\db\\schema\\carts.ts",{"content":"import { boolean, json, pgTable, text, varchar } from \"drizzle-orm/pg-core\"\n\nimport { generateId } from \"@/lib/id\"\nimport { type CartItemSchema } from \"@/lib/validations/cart\"\n\nimport { lifecycleDates } from \"./utils\"\n\n// @see: https://github.com/jackblatch/OneStopShop/blob/main/db/schema.ts\nexport const carts = pgTable(\"carts\", {\n  id: varchar(\"id\", { length: 30 })\n    .$defaultFn(() => generateId())\n    .primaryKey(), // prefix_ + nanoid (12)\n  paymentIntentId: varchar(\"payment_intent_id\", { length: 256 }),\n  clientSecret: text(\"client_secret\"),\n  items: json(\"items\").$type<CartItemSchema[] | null>().default(null),\n  closed: boolean(\"closed\").notNull().default(false),\n  ...lifecycleDates,\n})\n\nexport type Cart = typeof carts.$inferSelect\nexport type NewCart = typeof carts.$inferInsert\n","originalImport":"./carts","alias":false}],["C:\\Users\\Home\\Desktop\\skateshop-main\\src\\db\\schema\\categories.ts",{"content":"import { relations } from \"drizzle-orm\"\nimport { pgTable, text, varchar } from \"drizzle-orm/pg-core\"\n\nimport { generateId } from \"@/lib/id\"\n\nimport { products } from \"./products\"\nimport { subcategories } from \"./subcategories\"\nimport { lifecycleDates } from \"./utils\"\n\nexport const categories = pgTable(\"categories\", {\n  id: varchar(\"id\", { length: 30 })\n    .$defaultFn(() => generateId())\n    .primaryKey(), // prefix_ + nanoid (12)\n  name: text(\"name\").notNull().unique(),\n  slug: text(\"slug\").notNull().unique(),\n  image: text(\"image\"),\n  description: text(\"description\"),\n  ...lifecycleDates,\n})\n\nexport const categoriesRelations = relations(categories, ({ many }) => ({\n  products: many(products),\n  subcategories: many(subcategories),\n}))\n\nexport type Category = typeof categories.$inferSelect\nexport type NewCategory = typeof categories.$inferInsert\n","originalImport":"./categories","alias":false}],["C:\\Users\\Home\\Desktop\\skateshop-main\\src\\db\\schema\\customers.ts",{"content":"import { relations } from \"drizzle-orm\"\nimport { index, pgTable, text, varchar } from \"drizzle-orm/pg-core\"\n\nimport { generateId } from \"@/lib/id\"\n\nimport { stores } from \"./stores\"\nimport { lifecycleDates } from \"./utils\"\n\nexport const customers = pgTable(\n  \"customers\",\n  {\n    id: varchar(\"id\", { length: 30 })\n      .$defaultFn(() => generateId())\n      .primaryKey(), // prefix_ + nanoid (12)\n    name: text(\"name\"),\n    email: text(\"email\"),\n    storeConnectId: varchar(\"store_connect_id\").unique(), // stripe connect\n    stripeCustomerId: varchar(\"stripe_customer_id\").unique().notNull(),\n    storeId: varchar(\"store_id\", { length: 30 })\n      .references(() => stores.id, { onDelete: \"cascade\" })\n      .notNull(),\n    ...lifecycleDates,\n  },\n  (table) => ({\n    storeIdIdx: index(\"customers_store_id_idx\").on(table.storeId),\n    stripeCustomerIdIdx: index(\"customers_stripe_customer_id_idx\").on(\n      table.stripeCustomerId\n    ),\n  })\n)\n\nexport const customersRelations = relations(customers, ({ one }) => ({\n  store: one(stores, {\n    fields: [customers.storeId],\n    references: [stores.id],\n  }),\n}))\n\nexport type Customer = typeof customers.$inferSelect\nexport type NewCustomer = typeof customers.$inferInsert\n","originalImport":"./customers","alias":false}],["C:\\Users\\Home\\Desktop\\skateshop-main\\src\\db\\schema\\notifications.ts",{"content":"import { boolean, pgTable, text, varchar } from \"drizzle-orm/pg-core\"\n\nimport { generateId } from \"@/lib/id\"\n\nimport { lifecycleDates } from \"./utils\"\n\nexport const notifications = pgTable(\"notifications\", {\n  id: varchar(\"id\", { length: 30 })\n    .$defaultFn(() => generateId())\n    .primaryKey(), // prefix_ + nanoid (12)\n  userId: varchar(\"user_id\", { length: 36 }), // uuid v4\n  email: text(\"email\").notNull().unique(),\n  token: text(\"token\").notNull().unique(),\n  referredBy: text(\"referred_by\"),\n  communication: boolean(\"communication\").default(false).notNull(),\n  newsletter: boolean(\"newsletter\").default(false).notNull(),\n  marketing: boolean(\"marketing\").default(false).notNull(),\n  ...lifecycleDates,\n})\n\nexport type Notification = typeof notifications.$inferSelect\nexport type NewNotification = typeof notifications.$inferInsert\n","originalImport":"./notifications","alias":false}],["C:\\Users\\Home\\Desktop\\skateshop-main\\src\\db\\schema\\orders.ts",{"content":"import {\n  decimal,\n  index,\n  integer,\n  json,\n  pgTable,\n  text,\n  varchar,\n} from \"drizzle-orm/pg-core\"\n\nimport { generateId } from \"@/lib/id\"\nimport { type CheckoutItemSchema } from \"@/lib/validations/cart\"\n\nimport { addresses } from \"./addresses\"\nimport { stores } from \"./stores\"\nimport { lifecycleDates } from \"./utils\"\n\n// @see: https://github.com/jackblatch/OneStopShop/blob/main/db/schema.ts\nexport const orders = pgTable(\n  \"orders\",\n  {\n    id: varchar(\"id\", { length: 30 })\n      .$defaultFn(() => generateId())\n      .primaryKey(), // prefix_ + nanoid (12)\n    storeId: varchar(\"store_id\", { length: 30 })\n      .references(() => stores.id, { onDelete: \"cascade\" })\n      .notNull(),\n    items: json(\"items\").$type<CheckoutItemSchema[] | null>().default(null),\n    quantity: integer(\"quantity\"),\n    amount: decimal(\"amount\", { precision: 10, scale: 2 })\n      .notNull()\n      .default(\"0\"),\n    stripePaymentIntentId: text(\"stripe_payment_intent_id\").notNull(),\n    stripePaymentIntentStatus: text(\"stripe_payment_intent_status\").notNull(),\n    name: text(\"name\").notNull(),\n    email: text(\"email\").notNull(),\n    addressId: varchar(\"address_id\", { length: 30 })\n      .references(() => addresses.id, { onDelete: \"cascade\" })\n      .notNull(),\n    ...lifecycleDates,\n  },\n  (table) => ({\n    storeIdIdx: index(\"orders_store_id_idx\").on(table.storeId),\n    addressIdIdx: index(\"orders_address_id_idx\").on(table.addressId),\n  })\n)\n\nexport type Order = typeof orders.$inferSelect\nexport type NewOrder = typeof orders.$inferInsert\n","originalImport":"./orders","alias":false}],["C:\\Users\\Home\\Desktop\\skateshop-main\\src\\db\\schema\\payments.ts",{"content":"import { relations } from \"drizzle-orm\"\nimport {\n  boolean,\n  index,\n  pgTable,\n  timestamp,\n  varchar,\n} from \"drizzle-orm/pg-core\"\n\nimport { generateId } from \"@/lib/id\"\n\nimport { stores } from \"./stores\"\nimport { lifecycleDates } from \"./utils\"\n\n// @see: https://github.com/jackblatch/OneStopShop/blob/main/db/schema.ts\nexport const payments = pgTable(\n  \"payments\",\n  {\n    id: varchar(\"id\", { length: 30 })\n      .$defaultFn(() => generateId())\n      .primaryKey(), // prefix_ + nanoid (12)\n    storeId: varchar(\"store_id\", { length: 30 })\n      .references(() => stores.id, { onDelete: \"cascade\" })\n      .notNull(),\n    stripeAccountId: varchar(\"stripe_account_id\", { length: 256 }).notNull(),\n    stripeAccountCreatedAt: timestamp(\"stripe_account_created_at\"),\n    stripeAccountExpiresAt: timestamp(\"stripe_account_expires_at\"),\n    detailsSubmitted: boolean(\"details_submitted\").notNull().default(false),\n    ...lifecycleDates,\n  },\n  (table) => ({\n    storeIdIdx: index(\"payments_store_id_idx\").on(table.storeId),\n  })\n)\n\nexport const paymentsRelations = relations(payments, ({ one }) => ({\n  store: one(stores, { fields: [payments.storeId], references: [stores.id] }),\n}))\n\nexport type Payment = typeof payments.$inferSelect\nexport type NewPayment = typeof payments.$inferInsert\n","originalImport":"./payments","alias":false}],["C:\\Users\\Home\\Desktop\\skateshop-main\\src\\db\\schema\\products.ts",{"content":"import type { StoredFile } from \"@/types\"\nimport { relations } from \"drizzle-orm\"\nimport {\n  decimal,\n  index,\n  integer,\n  json,\n  pgEnum,\n  pgTable,\n  text,\n  varchar,\n} from \"drizzle-orm/pg-core\"\n\nimport { generateId } from \"@/lib/id\"\n\nimport { categories } from \"./categories\"\nimport { stores } from \"./stores\"\nimport { subcategories } from \"./subcategories\"\nimport { productTags } from \"./tags\"\nimport { lifecycleDates } from \"./utils\"\nimport { productVariants } from \"./variants\"\n\nexport const productStatusEnum = pgEnum(\"product_status\", [\n  \"active\",\n  \"draft\",\n  \"archived\",\n])\n\nexport const products = pgTable(\n  \"products\",\n  {\n    id: varchar(\"id\", { length: 30 })\n      .$defaultFn(() => generateId())\n      .primaryKey(), // prefix_ + nanoid (12)\n    name: text(\"name\").notNull(),\n    description: text(\"description\"),\n    images: json(\"images\").$type<StoredFile[] | null>().default(null),\n    categoryId: varchar(\"category_id\", { length: 30 })\n      .references(() => categories.id, { onDelete: \"cascade\" })\n      .notNull(),\n    subcategoryId: varchar(\"subcategory_id\", { length: 30 }).references(\n      () => subcategories.id,\n      { onDelete: \"cascade\" }\n    ),\n    /**\n     * postgresql docs suggest using numeric for money\n     * @see https://www.postgresql.org/docs/current/datatype-money.html#:~:text=Values%20of%20the%20numeric%2C%20int%2C%20and%20bigint%20data%20types%20can%20be%20cast%20to%20money.\n     * numeric and decimal are the same in postgresql\n     * @see https://www.postgresql.org/docs/current/datatype-numeric.html#:~:text=9223372036854775808%20to%20%2B9223372036854775807-,decimal,the%20decimal%20point%3B%20up%20to%2016383%20digits%20after%20the%20decimal%20point,-real\n     */\n    price: decimal(\"price\", { precision: 10, scale: 2 }).notNull().default(\"0\"),\n    originalPrice: decimal(\"original_price\", {\n      precision: 10,\n      scale: 2,\n    }).default(\"0\"),\n    inventory: integer(\"inventory\").notNull().default(0),\n    rating: integer(\"rating\").notNull().default(0),\n    status: productStatusEnum(\"status\").notNull().default(\"active\"),\n    storeId: varchar(\"store_id\", { length: 30 })\n      .references(() => stores.id, { onDelete: \"cascade\" })\n      .notNull(),\n    ...lifecycleDates,\n  },\n  (table) => ({\n    storeIdIdx: index(\"products_store_id_idx\").on(table.storeId),\n    categoryIdIdx: index(\"products_category_id_idx\").on(table.categoryId),\n    subcategoryIdIdx: index(\"products_subcategory_id_idx\").on(\n      table.subcategoryId\n    ),\n  })\n)\n\nexport const productsRelations = relations(products, ({ one, many }) => ({\n  store: one(stores, { fields: [products.storeId], references: [stores.id] }),\n  category: one(categories, {\n    fields: [products.categoryId],\n    references: [categories.id],\n  }),\n  subcategory: one(subcategories, {\n    fields: [products.subcategoryId],\n    references: [subcategories.id],\n  }),\n  variants: many(productVariants, { relationName: \"productVariants\" }),\n  tags: many(productTags, { relationName: \"productTags\" }),\n}))\n\nexport type Product = typeof products.$inferSelect\nexport type NewProduct = typeof products.$inferInsert\n","originalImport":"./products","alias":false}],["C:\\Users\\Home\\Desktop\\skateshop-main\\src\\db\\schema\\stocks.ts",{"content":"import { relations } from \"drizzle-orm\"\nimport { index, integer, pgTable, varchar } from \"drizzle-orm/pg-core\"\n\nimport { generateId } from \"@/lib/id\"\n\nimport { lifecycleDates } from \"./utils\"\nimport { productVariants, productVariantValues } from \"./variants\"\n\nexport const stocks = pgTable(\n  \"stocks\",\n  {\n    id: varchar(\"id\", { length: 30 })\n      .$defaultFn(() => generateId())\n      .primaryKey(),\n    productVariantId: varchar(\"product_variant_id\", { length: 30 })\n      .references(() => productVariants.id, { onDelete: \"cascade\" })\n      .notNull(),\n    quantity: integer(\"quantity\").notNull().default(0),\n    ...lifecycleDates,\n  },\n  (table) => ({\n    productVariantIdIdx: index(\"stocks_product_variant_id_idx\").on(\n      table.productVariantId\n    ),\n  })\n)\n\nexport const stocksRelations = relations(stocks, ({ one }) => ({\n  productVariant: one(productVariants, {\n    fields: [stocks.productVariantId],\n    references: [productVariants.id],\n  }),\n  productVariantValues: one(productVariantValues, {\n    fields: [stocks.productVariantId],\n    references: [productVariantValues.productVariantId],\n  }),\n}))\n\nexport type Stock = typeof stocks.$inferSelect\nexport type NewStock = typeof stocks.$inferInsert\n","originalImport":"./stocks","alias":false}],["C:\\Users\\Home\\Desktop\\skateshop-main\\src\\db\\schema\\stores.ts",{"content":"import { relations } from \"drizzle-orm\"\nimport {\n  boolean,\n  integer,\n  pgEnum,\n  pgTable,\n  text,\n  timestamp,\n  varchar,\n} from \"drizzle-orm/pg-core\"\n\nimport { generateId } from \"@/lib/id\"\n\nimport { customers } from \"./customers\"\nimport { payments } from \"./payments\"\nimport { products } from \"./products\"\nimport { tags } from \"./tags\"\nimport { lifecycleDates } from \"./utils\"\nimport { variants } from \"./variants\"\n\nexport const storePlanEnum = pgEnum(\"store_plan\", [\"free\", \"standard\", \"pro\"])\n\nexport const stores = pgTable(\"stores\", {\n  id: varchar(\"id\", { length: 30 })\n    .$defaultFn(() => generateId())\n    .primaryKey(), // prefix_ + nanoid (12)\n  userId: varchar(\"user_id\", { length: 36 }).notNull(), // uuid v4\n  slug: text(\"slug\").unique().notNull(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n\n  plan: storePlanEnum(\"plan\").notNull().default(\"free\"),\n  planEndsAt: timestamp(\"ends_at\"),\n  cancelPlanAtEnd: boolean(\"cancel_plan_at_end\").default(false),\n  stripeAccountId: varchar(\"stripe_account_id\").unique(), // stripe connect\n  stripeCustomerId: varchar(\"stripe_customer_id\").unique(),\n  productLimit: integer(\"product_limit\").notNull().default(10),\n  tagLimit: integer(\"tag_limit\").notNull().default(5),\n  variantLimit: integer(\"variant_limit\").notNull().default(5),\n  ...lifecycleDates,\n})\n\nexport const storesRelations = relations(stores, ({ many }) => ({\n  products: many(products, { relationName: \"storeProducts\" }),\n  payments: many(payments, { relationName: \"storePayments\" }),\n  customers: many(customers, { relationName: \"storeCustomers\" }),\n  tags: many(tags, { relationName: \"storeTags\" }),\n  variants: many(variants, { relationName: \"storeVariants\" }),\n}))\n\nexport type Store = typeof stores.$inferSelect\nexport type NewStore = typeof stores.$inferInsert\n","originalImport":"./stores","alias":false}],["C:\\Users\\Home\\Desktop\\skateshop-main\\src\\db\\schema\\subcategories.ts",{"content":"import { relations } from \"drizzle-orm\"\nimport { index, pgTable, text, varchar } from \"drizzle-orm/pg-core\"\n\nimport { generateId } from \"@/lib/id\"\n\nimport { categories } from \"./categories\"\nimport { lifecycleDates } from \"./utils\"\n\nexport const subcategories = pgTable(\n  \"subcategories\",\n  {\n    id: varchar(\"id\", { length: 30 })\n      .$defaultFn(() => generateId())\n      .primaryKey(), // prefix_ + nanoid (12)\n    name: text(\"name\").notNull().unique(),\n    slug: text(\"slug\").unique().notNull(),\n    description: text(\"description\"),\n    categoryId: varchar(\"category_id\", { length: 30 })\n      .references(() => categories.id, { onDelete: \"cascade\" })\n      .notNull(),\n    ...lifecycleDates,\n  },\n  (table) => ({\n    subcategoriesCategoryIdIdx: index(\"subcategories_category_id_idx\").on(\n      table.categoryId\n    ),\n  })\n)\n\nexport const subcategoriesRelations = relations(subcategories, ({ one }) => ({\n  category: one(categories, {\n    fields: [subcategories.categoryId],\n    references: [categories.id],\n  }),\n}))\n\nexport type Subcategory = typeof subcategories.$inferSelect\nexport type NewSubcategory = typeof subcategories.$inferInsert\n","originalImport":"./subcategories","alias":false}],["C:\\Users\\Home\\Desktop\\skateshop-main\\src\\db\\schema\\tags.ts",{"content":"import { relations } from \"drizzle-orm\"\nimport {\n  index,\n  pgTable,\n  primaryKey,\n  text,\n  unique,\n  varchar,\n} from \"drizzle-orm/pg-core\"\n\nimport { generateId } from \"@/lib/id\"\n\nimport { products } from \"./products\"\nimport { stores } from \"./stores\"\nimport { lifecycleDates } from \"./utils\"\n\n// store tags\nexport const tags = pgTable(\n  \"tags\",\n  {\n    id: varchar(\"id\", { length: 30 })\n      .$defaultFn(() => generateId())\n      .primaryKey(),\n    name: text(\"name\").notNull(),\n    color: text(\"color\").notNull().default(\"blue\"),\n    storeId: varchar(\"store_id\", { length: 30 })\n      .references(() => stores.id, { onDelete: \"cascade\" })\n      .notNull(),\n    ...lifecycleDates,\n  },\n  (table) => ({\n    tagsNameUnique: unique(\"tags_name_store_id_unique\")\n      .on(table.name, table.storeId)\n      .nullsNotDistinct(),\n    storeIdIdx: index(\"tags_store_id_idx\").on(table.storeId),\n  })\n)\n\nexport const tagsRelations = relations(tags, ({ one, many }) => ({\n  store: one(stores, { fields: [tags.storeId], references: [stores.id] }),\n  products: many(products, {\n    relationName: \"productTags\",\n  }),\n}))\n\nexport type Tag = typeof tags.$inferSelect\nexport type NewTag = typeof tags.$inferInsert\n\nexport const productTags = pgTable(\n  \"product_tags\",\n  {\n    productId: varchar(\"product_id\", { length: 30 })\n      .references(() => products.id, { onDelete: \"cascade\" })\n      .notNull(),\n    tagId: varchar(\"tag_id\", { length: 30 })\n      .references(() => tags.id, { onDelete: \"cascade\" })\n      .notNull(),\n    ...lifecycleDates,\n  },\n  (table) => ({\n    pk: primaryKey({\n      name: \"product_tags_pk\",\n      columns: [table.productId, table.tagId],\n    }),\n    productTagIdx: index(\"product_tags_product_id_tag_id_idx\").on(\n      table.productId,\n      table.tagId\n    ),\n  })\n)\n\nexport const productTagsRelations = relations(productTags, ({ one }) => ({\n  product: one(products, {\n    fields: [productTags.productId],\n    references: [products.id],\n  }),\n  tag: one(tags, { fields: [productTags.tagId], references: [tags.id] }),\n}))\n\nexport type ProductTag = typeof productTags.$inferSelect\nexport type NewProductTag = typeof productTags.$inferInsert\n","originalImport":"./tags","alias":false}],["C:\\Users\\Home\\Desktop\\skateshop-main\\src\\db\\schema\\variants.ts",{"content":"import { relations } from \"drizzle-orm\"\nimport {\n  decimal,\n  index,\n  pgTable,\n  primaryKey,\n  text,\n  unique,\n  varchar,\n} from \"drizzle-orm/pg-core\"\n\nimport { generateId } from \"@/lib/id\"\n\nimport { products } from \"./products\"\nimport { stocks } from \"./stocks\"\nimport { stores } from \"./stores\"\nimport { lifecycleDates } from \"./utils\"\n\n// store variants\nexport const variants = pgTable(\n  \"variants\",\n  {\n    id: varchar(\"id\", { length: 30 })\n      .$defaultFn(() => generateId())\n      .primaryKey(),\n    storeId: varchar(\"store_id\", { length: 30 })\n      .references(() => stores.id, { onDelete: \"cascade\" })\n      .notNull(),\n    name: text(\"name\").notNull(),\n    ...lifecycleDates,\n  },\n  (table) => ({\n    variantsNameUnique: unique(\"variants_name_store_id_unique\")\n      .on(table.name, table.storeId)\n      .nullsNotDistinct(),\n    storeIdIdx: index(\"variants_store_id_idx\").on(table.storeId),\n  })\n)\n\nexport const variantsRelations = relations(variants, ({ one }) => ({\n  store: one(stores, { fields: [variants.storeId], references: [stores.id] }),\n}))\n\nexport type Variant = typeof variants.$inferSelect\nexport type NewVariant = typeof variants.$inferInsert\n\nexport const productVariants = pgTable(\n  \"product_variants\",\n  {\n    id: varchar(\"id\", { length: 30 })\n      .$defaultFn(() => generateId())\n      .primaryKey(),\n    productId: varchar(\"product_id\", { length: 30 })\n      .references(() => products.id, { onDelete: \"cascade\" })\n      .notNull(),\n    variantId: varchar(\"variant_id\", { length: 30 })\n      .references(() => variants.id, { onDelete: \"cascade\" })\n      .notNull(),\n    ...lifecycleDates,\n  },\n  (table) => ({\n    productIdIdx: index(\"product_variants_product_id_idx\").on(table.productId),\n    variantIdIdx: index(\"product_variants_variant_id_idx\").on(table.variantId),\n  })\n)\n\nexport const productVariantsRelations = relations(\n  productVariants,\n  ({ one, many }) => ({\n    product: one(products, {\n      fields: [productVariants.productId],\n      references: [products.id],\n    }),\n    variant: one(variants, {\n      fields: [productVariants.variantId],\n      references: [variants.id],\n    }),\n    productVariantValues: many(productVariantValues),\n  })\n)\n\nexport type ProductVariant = typeof productVariants.$inferSelect\nexport type NewProductVariant = typeof productVariants.$inferInsert\n\nexport const productVariantValues = pgTable(\n  \"product_variant_values\",\n  {\n    productVariantId: varchar(\"product_variant_id\", { length: 30 })\n      .references(() => productVariants.id, { onDelete: \"cascade\" })\n      .notNull(),\n    value: text(\"value\").notNull(),\n    price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n    stockId: varchar(\"stock_id\", { length: 30 })\n      .references(() => stocks.id, { onDelete: \"cascade\" })\n      .notNull(),\n    ...lifecycleDates,\n  },\n  (table) => ({\n    pk: primaryKey({\n      name: \"product_variant_values_pk\",\n      columns: [table.productVariantId, table.value],\n    }),\n    productVariantIdIdx: index(\"variant_values_product_variant_id_idx\").on(\n      table.productVariantId\n    ),\n    stockIdIdx: index(\"variant_values_stock_id_idx\").on(table.stockId),\n  })\n)\n\nexport const productVariantValuesRelations = relations(\n  productVariantValues,\n  ({ one }) => ({\n    productVariant: one(productVariants, {\n      fields: [productVariantValues.productVariantId],\n      references: [productVariants.productId],\n    }),\n  })\n)\n\nexport type ProductVariantValue = typeof productVariantValues.$inferSelect\nexport type NewProductVariantValue = typeof productVariantValues.$inferInsert\n","originalImport":"./variants","alias":false}],["C:\\Users\\Home\\Desktop\\skateshop-main\\src\\lib\\id.ts",{"content":"import { customAlphabet } from \"nanoid\"\n\nconst prefixes = {\n  store: \"str\",\n  product: \"prd\",\n  category: \"cat\",\n  subcategory: \"sub\",\n  cart: \"crt\",\n  subscription: \"sub\",\n  payment: \"pay\",\n  address: \"adr\",\n  order: \"ord\",\n  notification: \"not\",\n}\n\ninterface GenerateIdOptions {\n  /**\n   * The length of the generated ID.\n   * @default 16\n   * @example 16 => \"abc123def456ghi7\"\n   * */\n  length?: number\n  /**\n   * The separator to use between the prefix and the generated ID.\n   * @default \"_\"\n   * @example \"_\" => \"str_abc123\"\n   * */\n  separator?: string\n}\n\n/**\n * Generates a unique ID with a given prefix.\n * @param prefix The prefix to use for the generated ID.\n * @param options The options for generating the ID.\n * @example\n * generateId(\"store\") => \"str_abc123def456\"\n * generateId(\"store\", { length: 8 }) => \"str_abc123d\"\n * generateId(\"store\", { separator: \"-\" }) => \"str-abc123def456\"\n */\nexport function generateId(\n  prefix?: keyof typeof prefixes,\n  { length = 12, separator = \"_\" }: GenerateIdOptions = {}\n) {\n  const id = customAlphabet(\n    \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\",\n    length\n  )()\n  return prefix ? `${prefixes[prefix]}${separator}${id}` : id\n}\n","originalImport":"@/lib/id","alias":true}],["C:\\Users\\Home\\Desktop\\skateshop-main\\src\\db\\schema\\utils.ts",{"content":"// @see https://github.com/unkeyed/unkey/blob/main/internal/db/src/schema/util/lifecycle_dates.ts\n\nimport { sql } from \"drizzle-orm\"\nimport { timestamp } from \"drizzle-orm/pg-core\"\n\nexport const lifecycleDates = {\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\")\n    .default(sql`current_timestamp`)\n    .$onUpdate(() => new Date()),\n}\n","originalImport":"./utils","alias":false}],["C:\\Users\\Home\\Desktop\\skateshop-main\\src\\lib\\validations\\cart.ts",{"content":"import * as z from \"zod\"\n\nexport const cartItemSchema = z.object({\n  productId: z.string(),\n  quantity: z.number().min(0),\n  subcategoryId: z.string().optional(),\n})\n\nexport const checkoutItemSchema = cartItemSchema.extend({\n  price: z.number(),\n})\n\nexport const cartLineItemSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  images: z\n    .array(\n      z.object({\n        id: z.string(),\n        name: z.string(),\n        url: z.string(),\n      })\n    )\n    .optional()\n    .nullable(),\n  category: z.string().optional().nullable(),\n  subcategory: z.string().optional().nullable(),\n  price: z.string().regex(/^\\d+(\\.\\d{1,2})?$/),\n  inventory: z.number().default(0),\n  quantity: z.number(),\n  storeId: z.string(),\n  storeName: z.string().optional().nullable(),\n  storeStripeAccountId: z.string().optional().nullable(),\n})\n\nexport const deleteCartItemSchema = z.object({\n  productId: z.string(),\n})\n\nexport const deleteCartItemsSchema = z.object({\n  productIds: z.array(z.string()),\n})\n\nexport const updateCartItemSchema = z.object({\n  quantity: z.number().min(0).default(1),\n})\n\nexport type CartItemSchema = z.infer<typeof cartItemSchema>\nexport type CheckoutItemSchema = z.infer<typeof checkoutItemSchema>\nexport type CartLineItemSchema = z.infer<typeof cartLineItemSchema>\nexport type DeleteCartItemSchema = z.infer<typeof deleteCartItemSchema>\nexport type DeleteCartItemsSchema = z.infer<typeof deleteCartItemsSchema>\nexport type UpdateCartItemSchema = z.infer<typeof updateCartItemSchema>\n","originalImport":"@/lib/validations/cart","alias":true}],["C:\\Users\\Home\\Desktop\\skateshop-main\\src\\env.js",{"content":"import { createEnv } from \"@t3-oss/env-nextjs\"\nimport { z } from \"zod\"\n\nexport const env = createEnv({\n  /**\n   * Specify your server-side environment variables schema here. This way you can ensure the app\n   * isn't built with invalid env vars.\n   */\n  server: {\n    NODE_ENV: z\n      .enum([\"development\", \"test\", \"production\"])\n      .default(\"development\"),\n    DATABASE_URL: z.string().url(),\n    CLERK_SECRET_KEY: z.string().min(1),\n    RESEND_API_KEY: z.string().min(1),\n    EMAIL_FROM_ADDRESS: z.string().email(),\n    UPLOADTHING_SECRET: z.string().min(1),\n    UPLOADTHING_APP_ID: z.string().min(1),\n    UPSTASH_REDIS_REST_URL: z.string().url(),\n    UPSTASH_REDIS_REST_TOKEN: z.string().min(1),\n    STRIPE_API_KEY: z.string().min(1),\n    STRIPE_WEBHOOK_SECRET: z.string().min(1),\n    STRIPE_STD_MONTHLY_PRICE_ID: z.string().min(1),\n    STRIPE_PRO_MONTHLY_PRICE_ID: z.string().min(1),\n  },\n\n  /**\n   * Specify your client-side environment variables schema here. This way you can ensure the app\n   * isn't built with invalid env vars. To expose them to the client, prefix them with\n   * `NEXT_PUBLIC_`.\n   */\n  client: {\n    NEXT_PUBLIC_APP_URL: z.string().url(),\n    NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: z.string(),\n    NEXT_PUBLIC_CLERK_SIGN_IN_URL: z.string().min(1),\n    NEXT_PUBLIC_CLERK_SIGN_UP_URL: z.string().min(1),\n    NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: z.string(),\n  },\n\n  /**\n   * You can't destruct `process.env` as a regular object in the Next.js edge runtimes (e.g.\n   * middlewares) or client-side so we need to destruct manually.\n   */\n  runtimeEnv: {\n    NODE_ENV: process.env.NODE_ENV,\n    DATABASE_URL: process.env.DATABASE_URL,\n    NEXT_PUBLIC_APP_URL: process.env.NEXT_PUBLIC_APP_URL,\n    NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY:\n      process.env.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY,\n    NEXT_PUBLIC_CLERK_SIGN_IN_URL: process.env.NEXT_PUBLIC_CLERK_SIGN_IN_URL,\n    NEXT_PUBLIC_CLERK_SIGN_UP_URL: process.env.NEXT_PUBLIC_CLERK_SIGN_UP_URL,\n    CLERK_SECRET_KEY: process.env.CLERK_SECRET_KEY,\n    RESEND_API_KEY: process.env.RESEND_API_KEY,\n    EMAIL_FROM_ADDRESS: process.env.EMAIL_FROM_ADDRESS,\n    UPLOADTHING_SECRET: process.env.UPLOADTHING_SECRET,\n    UPLOADTHING_APP_ID: process.env.UPLOADTHING_APP_ID,\n    UPSTASH_REDIS_REST_URL: process.env.UPSTASH_REDIS_REST_URL,\n    UPSTASH_REDIS_REST_TOKEN: process.env.UPSTASH_REDIS_REST_TOKEN,\n    NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY:\n      process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY,\n    STRIPE_API_KEY: process.env.STRIPE_API_KEY,\n    STRIPE_WEBHOOK_SECRET: process.env.STRIPE_WEBHOOK_SECRET,\n    STRIPE_STD_MONTHLY_PRICE_ID: process.env.STRIPE_STD_MONTHLY_PRICE_ID,\n    STRIPE_PRO_MONTHLY_PRICE_ID: process.env.STRIPE_PRO_MONTHLY_PRICE_ID,\n  },\n  /**\n   * Run `build` or `dev` with `SKIP_ENV_VALIDATION` to skip env validation. This is especially\n   * useful for Docker builds.\n   */\n  skipValidation: !!process.env.SKIP_ENV_VALIDATION,\n  /**\n   * Makes it so that empty strings are treated as undefined. `SOME_VAR: z.string()` and\n   * `SOME_VAR=''` will throw an error.\n   */\n  emptyStringAsUndefined: true,\n})\n","originalImport":"@/env.js","alias":true}],["C:\\Users\\Home\\Desktop\\skateshop-main\\src\\app\\(auth)\\signin\\reset-password\\confirm\\[[...confirm]]\\page.tsx",{"content":"import { type Metadata } from \"next\"\nimport { env } from \"@/env.js\"\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport { Shell } from \"@/components/shell\"\nimport { ResetPasswordConfirmForm } from \"@/app/(auth)/_components/reset-password-confirm-form\"\n\nexport const metadata: Metadata = {\n  metadataBase: new URL(env.NEXT_PUBLIC_APP_URL),\n  title: \"Reset Password\",\n  description: \"Enter your email to reset your password\",\n}\n\nexport default function ResetPasswordConfirmPage() {\n  return (\n    <Shell className=\"max-w-lg\">\n      <Card>\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-2xl\">Reset password</CardTitle>\n          <CardDescription>\n            Enter your email address and we will send you a verification code\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <ResetPasswordConfirmForm />\n        </CardContent>\n      </Card>\n    </Shell>\n  )\n}\n"}],["C:\\Users\\Home\\Desktop\\skateshop-main\\src\\components\\shell.tsx",{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst shellVariants = cva(\"grid items-center gap-8 pb-8 pt-6 lg:py-6\", {\n  variants: {\n    variant: {\n      default: \"container\",\n      sidebar: \"\",\n      centered: \"container flex h-dvh max-w-2xl flex-col justify-center\",\n      markdown: \"container max-w-3xl py-8 md:py-10\",\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n  },\n})\n\ninterface ShellProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof shellVariants> {\n  as?: React.ElementType\n}\n\nfunction Shell({\n  className,\n  as: Comp = \"section\",\n  variant,\n  ...props\n}: ShellProps) {\n  return (\n    <Comp className={cn(shellVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Shell, shellVariants }\n","originalImport":"@/components/shell","alias":true}],["C:\\Users\\Home\\Desktop\\skateshop-main\\src\\app\\(auth)\\_components\\reset-password-confirm-form.tsx",{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { useRouter } from \"next/navigation\"\nimport { useSignIn } from \"@clerk/nextjs\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm } from \"react-hook-form\"\nimport { toast } from \"sonner\"\nimport type { z } from \"zod\"\n\nimport { showErrorToast } from \"@/lib/handle-error\"\nimport { resetPasswordSchema } from \"@/lib/validations/auth\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\"\nimport {\n  InputOTP,\n  InputOTPGroup,\n  InputOTPSlot,\n} from \"@/components/ui/input-otp\"\nimport { Icons } from \"@/components/icons\"\nimport { PasswordInput } from \"@/components/password-input\"\n\ntype Inputs = z.infer<typeof resetPasswordSchema>\n\nexport function ResetPasswordConfirmForm() {\n  const router = useRouter()\n  const { isLoaded, signIn, setActive } = useSignIn()\n  const [loading, setLoading] = React.useState(false)\n\n  // react-hook-form\n  const form = useForm<Inputs>({\n    resolver: zodResolver(resetPasswordSchema),\n    defaultValues: {\n      password: \"\",\n      confirmPassword: \"\",\n      code: \"\",\n    },\n  })\n\n  async function onSubmit(data: Inputs) {\n    if (!isLoaded) return\n\n    setLoading(true)\n\n    try {\n      const attemptFirstFactor = await signIn.attemptFirstFactor({\n        strategy: \"reset_password_email_code\",\n        code: data.code,\n        password: data.password,\n      })\n\n      if (attemptFirstFactor.status === \"needs_second_factor\") {\n        // TODO: implement 2FA (requires clerk pro plan)\n      } else if (attemptFirstFactor.status === \"complete\") {\n        await setActive({\n          session: attemptFirstFactor.createdSessionId,\n        })\n        router.push(`${window.location.origin}/`)\n        toast.success(\"Password reset successfully.\")\n      } else {\n        console.error(attemptFirstFactor)\n      }\n    } catch (err) {\n      showErrorToast(err)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <Form {...form}>\n      <form className=\"grid gap-4\" onSubmit={form.handleSubmit(onSubmit)}>\n        <FormField\n          control={form.control}\n          name=\"password\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Password</FormLabel>\n              <FormControl>\n                <PasswordInput placeholder=\"*********\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"confirmPassword\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Confirm Password</FormLabel>\n              <FormControl>\n                <PasswordInput placeholder=\"*********\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"code\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>One-Time Password</FormLabel>\n              <FormControl>\n                <InputOTP maxLength={6} {...field}>\n                  <InputOTPGroup>\n                    <InputOTPSlot index={0} />\n                    <InputOTPSlot index={1} />\n                    <InputOTPSlot index={2} />\n                    <InputOTPSlot index={3} />\n                    <InputOTPSlot index={4} />\n                    <InputOTPSlot index={5} />\n                  </InputOTPGroup>\n                </InputOTP>\n              </FormControl>\n              <FormDescription>\n                Please enter the 6-digit code sent to your email.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <div className=\"mt-2 flex flex-col-reverse gap-2 sm:flex-row\">\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            className=\"w-full\"\n            onClick={() => router.back()}\n          >\n            Go back\n          </Button>\n          <Button className=\"w-full\" disabled={loading}>\n            {loading && (\n              <Icons.spinner\n                className=\"mr-2 size-4 animate-spin\"\n                aria-hidden=\"true\"\n              />\n            )}\n            Reset password\n            <span className=\"sr-only\">Reset password</span>\n          </Button>\n        </div>\n      </form>\n    </Form>\n  )\n}\n","originalImport":"@/app/(auth)/_components/reset-password-confirm-form","alias":true}],["C:\\Users\\Home\\Desktop\\skateshop-main\\src\\lib\\handle-error.ts",{"content":"import { isClerkAPIResponseError } from \"@clerk/nextjs/errors\"\nimport { toast } from \"sonner\"\nimport * as z from \"zod\"\n\nimport { unknownError } from \"@/lib/constants\"\n\nexport function getErrorMessage(err: unknown) {\n  if (err instanceof z.ZodError) {\n    return err.errors[0]?.message ?? unknownError\n  } else if (isClerkAPIResponseError(err)) {\n    return err.errors[0]?.longMessage ?? unknownError\n  } else if (err instanceof Error) {\n    return err.message\n  } else {\n    return unknownError\n  }\n}\n\nexport function showErrorToast(err: unknown) {\n  const errorMessage = getErrorMessage(err)\n  console.log({ errorMessage })\n\n  return toast.error(errorMessage)\n}\n","originalImport":"@/lib/handle-error","alias":true}],["C:\\Users\\Home\\Desktop\\skateshop-main\\src\\lib\\validations\\auth.ts",{"content":"import * as z from \"zod\"\n\nexport const authSchema = z.object({\n  email: z.string().email({\n    message: \"Please enter a valid email address\",\n  }),\n  password: z\n    .string()\n    .min(8, {\n      message: \"Password must be at least 8 characters long\",\n    })\n    .max(100, {\n      message: \"Password must be at most 100 characters long\",\n    }),\n})\n\nexport const verifyEmailSchema = z.object({\n  code: z\n    .string()\n    .min(6, {\n      message: \"Verification code must be 6 characters long\",\n    })\n    .max(6),\n})\n\nexport const checkEmailSchema = z.object({\n  email: authSchema.shape.email,\n})\n\nexport const resetPasswordSchema = z\n  .object({\n    password: authSchema.shape.password,\n    confirmPassword: authSchema.shape.password,\n    code: verifyEmailSchema.shape.code,\n  })\n  .refine((data) => data.password === data.confirmPassword, {\n    message: \"Passwords do not match\",\n    path: [\"confirmPassword\"],\n  })\n\nexport const userPrivateMetadataSchema = z.object({\n  stripePriceId: z.string().optional().nullable(),\n  stripeSubscriptionId: z.string().optional().nullable(),\n  stripeCustomerId: z.string().optional().nullable(),\n  stripeCurrentPeriodEnd: z.string().optional().nullable(),\n})\n\nexport type UserPrivateMetadataSchema = z.infer<\n  typeof userPrivateMetadataSchema\n>\n","originalImport":"@/lib/validations/auth","alias":true}],["C:\\Users\\Home\\Desktop\\skateshop-main\\src\\components\\password-input.tsx",{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { EyeNoneIcon, EyeOpenIcon } from \"@radix-ui/react-icons\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input, type InputProps } from \"@/components/ui/input\"\n\nconst PasswordInput = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, ...props }, ref) => {\n    const [showPassword, setShowPassword] = React.useState(false)\n\n    return (\n      <div className=\"relative\">\n        <Input\n          type={showPassword ? \"text\" : \"password\"}\n          className={cn(\"pr-10\", className)}\n          ref={ref}\n          {...props}\n        />\n        <Button\n          type=\"button\"\n          variant=\"ghost\"\n          size=\"sm\"\n          className=\"absolute right-0 top-0 h-full px-3 py-1 hover:bg-transparent\"\n          onClick={() => setShowPassword((prev) => !prev)}\n          disabled={props.value === \"\" || props.disabled}\n        >\n          {showPassword ? (\n            <EyeNoneIcon className=\"size-4\" aria-hidden=\"true\" />\n          ) : (\n            <EyeOpenIcon className=\"size-4\" aria-hidden=\"true\" />\n          )}\n          <span className=\"sr-only\">\n            {showPassword ? \"Hide password\" : \"Show password\"}\n          </span>\n        </Button>\n      </div>\n    )\n  }\n)\nPasswordInput.displayName = \"PasswordInput\"\n\nexport { PasswordInput }\n","originalImport":"@/components/password-input","alias":true}],["C:\\Users\\Home\\Desktop\\skateshop-main\\src\\lib\\constants.ts",{"content":"export const unknownError = \"An unknown error occurred. Please try again later.\"\n\nexport const redirects = {\n  toLogin: \"/signin\",\n  toSignup: \"/signup\",\n  afterLogin: \"/dashboard/stores\",\n  afterLogout: \"/\",\n  toVerify: \"/verify-email\",\n  afterVerify: \"/dashboard/stores\",\n} as const\n","originalImport":"@/lib/constants","alias":true}],["C:\\Users\\Home\\Desktop\\skateshop-main\\src\\app\\(auth)\\signin\\reset-password\\[[...reset-password]]\\page.tsx",{"content":"import { type Metadata } from \"next\"\nimport { env } from \"@/env.js\"\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport { Shell } from \"@/components/shell\"\nimport { ResetPasswordForm } from \"@/app/(auth)/_components/reset-password-form\"\n\nexport const metadata: Metadata = {\n  metadataBase: new URL(env.NEXT_PUBLIC_APP_URL),\n  title: \"Reset Password\",\n  description: \"Enter your email to reset your password\",\n}\n\nexport default function ResetPasswordPage() {\n  return (\n    <Shell className=\"max-w-lg\">\n      <Card>\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-2xl\">Reset password</CardTitle>\n          <CardDescription>\n            Enter your email address and we will send you a verification code\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <ResetPasswordForm />\n        </CardContent>\n      </Card>\n    </Shell>\n  )\n}\n"}],["C:\\Users\\Home\\Desktop\\skateshop-main\\src\\app\\(auth)\\_components\\reset-password-form.tsx",{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { useRouter } from \"next/navigation\"\nimport { useSignIn } from \"@clerk/nextjs\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm } from \"react-hook-form\"\nimport { toast } from \"sonner\"\nimport type { z } from \"zod\"\n\nimport { showErrorToast } from \"@/lib/handle-error\"\nimport { checkEmailSchema } from \"@/lib/validations/auth\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\"\nimport { Input } from \"@/components/ui/input\"\nimport { Icons } from \"@/components/icons\"\n\ntype Inputs = z.infer<typeof checkEmailSchema>\n\nexport function ResetPasswordForm() {\n  const router = useRouter()\n  const { isLoaded, signIn } = useSignIn()\n  const [loading, setLoading] = React.useState(false)\n\n  // react-hook-form\n  const form = useForm<Inputs>({\n    resolver: zodResolver(checkEmailSchema),\n    defaultValues: {\n      email: \"\",\n    },\n  })\n\n  async function onSubmit(data: Inputs) {\n    if (!isLoaded) return\n\n    setLoading(true)\n\n    try {\n      const firstFactor = await signIn.create({\n        strategy: \"reset_password_email_code\",\n        identifier: data.email,\n      })\n\n      if (firstFactor.status === \"needs_first_factor\") {\n        router.push(\"/signin/reset-password/confirm\")\n        toast.message(\"Check your email\", {\n          description: \"We sent you a 6-digit verification code.\",\n        })\n      }\n    } catch (err) {\n      showErrorToast(err)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <Form {...form}>\n      <form className=\"grid gap-4\" onSubmit={form.handleSubmit(onSubmit)}>\n        <FormField\n          control={form.control}\n          name=\"email\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Email</FormLabel>\n              <FormControl>\n                <Input placeholder=\"rodneymullen180@gmail.com\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button className=\"mt-2\" disabled={loading}>\n          {loading && (\n            <Icons.spinner\n              className=\"mr-2 size-4 animate-spin\"\n              aria-hidden=\"true\"\n            />\n          )}\n          Continue\n          <span className=\"sr-only\">\n            Continue to reset password verification\n          </span>\n        </Button>\n      </form>\n    </Form>\n  )\n}\n","originalImport":"@/app/(auth)/_components/reset-password-form","alias":true}],["C:\\Users\\Home\\Desktop\\skateshop-main\\src\\app\\(auth)\\signin\\[[...signin]]\\page.tsx",{"content":"import { type Metadata } from \"next\"\nimport Link from \"next/link\"\nimport { env } from \"@/env.js\"\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport { Shell } from \"@/components/shell\"\nimport { OAuthSignIn } from \"@/app/(auth)/_components/oauth-signin\"\nimport { SignInForm } from \"@/app/(auth)/_components/signin-form\"\n\nexport const metadata: Metadata = {\n  metadataBase: new URL(env.NEXT_PUBLIC_APP_URL),\n  title: \"Sign In\",\n  description: \"Sign in to your account\",\n}\n\nexport default function SignInPage() {\n  return (\n    <Shell className=\"max-w-lg\">\n      <Card>\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-2xl\">Sign in</CardTitle>\n          <CardDescription>\n            Choose your preferred sign in method\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"grid gap-4\">\n          <OAuthSignIn />\n          <div className=\"relative\">\n            <div className=\"absolute inset-0 flex items-center\">\n              <span className=\"w-full border-t\" />\n            </div>\n            <div className=\"relative flex justify-center text-xs uppercase\">\n              <span className=\"bg-background px-2 text-muted-foreground\">\n                Or continue with\n              </span>\n            </div>\n          </div>\n          <SignInForm />\n        </CardContent>\n        <CardFooter className=\"flex flex-wrap items-center justify-between gap-2\">\n          <div className=\"text-sm text-muted-foreground\">\n            <span className=\"mr-1 hidden sm:inline-block\">\n              Don&apos;t have an account?\n            </span>\n            <Link\n              aria-label=\"Sign up\"\n              href=\"/signup\"\n              className=\"text-primary underline-offset-4 transition-colors hover:underline\"\n            >\n              Sign up\n            </Link>\n          </div>\n          <Link\n            aria-label=\"Reset password\"\n            href=\"/signin/reset-password\"\n            className=\"text-sm text-primary underline-offset-4 transition-colors hover:underline\"\n          >\n            Reset password\n          </Link>\n        </CardFooter>\n      </Card>\n    </Shell>\n  )\n}\n"}],["C:\\Users\\Home\\Desktop\\skateshop-main\\src\\app\\(auth)\\_components\\oauth-signin.tsx",{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { useSignIn } from \"@clerk/nextjs\"\nimport { type OAuthStrategy } from \"@clerk/types\"\n\nimport { showErrorToast } from \"@/lib/handle-error\"\nimport { Button } from \"@/components/ui/button\"\nimport { Icons } from \"@/components/icons\"\n\nconst oauthProviders = [\n  { name: \"Google\", strategy: \"oauth_google\", icon: \"google\" },\n  { name: \"Discord\", strategy: \"oauth_discord\", icon: \"discord\" },\n] satisfies {\n  name: string\n  icon: keyof typeof Icons\n  strategy: OAuthStrategy\n}[]\n\nexport function OAuthSignIn() {\n  const [loading, setLoading] = React.useState<OAuthStrategy | null>(null)\n  const { signIn, isLoaded: signInLoaded } = useSignIn()\n\n  async function oauthSignIn(provider: OAuthStrategy) {\n    if (!signInLoaded) return null\n\n    try {\n      setLoading(provider)\n      await signIn.authenticateWithRedirect({\n        strategy: provider,\n        redirectUrl: \"/sso-callback\",\n        redirectUrlComplete: \"/\",\n      })\n    } catch (err) {\n      setLoading(null)\n      showErrorToast(err)\n    }\n  }\n\n  return (\n    <div className=\"flex flex-col items-center gap-2 sm:flex-row sm:gap-4\">\n      {oauthProviders.map((provider) => {\n        const Icon = Icons[provider.icon]\n\n        return (\n          <Button\n            key={provider.strategy}\n            variant=\"outline\"\n            className=\"w-full bg-background\"\n            onClick={() => void oauthSignIn(provider.strategy)}\n            disabled={loading !== null}\n          >\n            {loading === provider.strategy ? (\n              <Icons.spinner\n                className=\"mr-2 size-4 animate-spin\"\n                aria-hidden=\"true\"\n              />\n            ) : (\n              <Icon className=\"mr-2 size-4\" aria-hidden=\"true\" />\n            )}\n            {provider.name}\n            <span className=\"sr-only\">{provider.name}</span>\n          </Button>\n        )\n      })}\n    </div>\n  )\n}\n","originalImport":"@/app/(auth)/_components/oauth-signin","alias":true}],["C:\\Users\\Home\\Desktop\\skateshop-main\\src\\app\\(auth)\\_components\\signin-form.tsx",{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { useRouter } from \"next/navigation\"\nimport { useSignIn } from \"@clerk/nextjs\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm } from \"react-hook-form\"\nimport type { z } from \"zod\"\n\nimport { showErrorToast } from \"@/lib/handle-error\"\nimport { authSchema } from \"@/lib/validations/auth\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\"\nimport { Input } from \"@/components/ui/input\"\nimport { Icons } from \"@/components/icons\"\nimport { PasswordInput } from \"@/components/password-input\"\n\ntype Inputs = z.infer<typeof authSchema>\n\nexport function SignInForm() {\n  const router = useRouter()\n  const { isLoaded, signIn, setActive } = useSignIn()\n  const [loading, setLoading] = React.useState(false)\n\n  // react-hook-form\n  const form = useForm<Inputs>({\n    resolver: zodResolver(authSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  })\n\n  async function onSubmit(data: Inputs) {\n    if (!isLoaded) return\n\n    setLoading(true)\n\n    try {\n      const result = await signIn.create({\n        identifier: data.email,\n        password: data.password,\n      })\n\n      if (result.status === \"complete\") {\n        await setActive({ session: result.createdSessionId })\n\n        router.push(`${window.location.origin}/`)\n      } else {\n        /*Investigate why the login hasn't completed */\n        console.log(result)\n      }\n    } catch (err) {\n      showErrorToast(err)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <Form {...form}>\n      <form className=\"grid gap-4\" onSubmit={form.handleSubmit(onSubmit)}>\n        <FormField\n          control={form.control}\n          name=\"email\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Email</FormLabel>\n              <FormControl>\n                <Input\n                  type=\"text\"\n                  placeholder=\"rodneymullen180@gmail.com\"\n                  {...field}\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"password\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Password</FormLabel>\n              <FormControl>\n                <PasswordInput placeholder=\"**********\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\" className=\"mt-2\" disabled={loading}>\n          {loading && (\n            <Icons.spinner\n              className=\"mr-2 size-4 animate-spin\"\n              aria-hidden=\"true\"\n            />\n          )}\n          Sign in\n          <span className=\"sr-only\">Sign in</span>\n        </Button>\n      </form>\n    </Form>\n  )\n}\n","originalImport":"@/app/(auth)/_components/signin-form","alias":true}],["C:\\Users\\Home\\Desktop\\skateshop-main\\src\\app\\(auth)\\signout\\[[...signout]]\\page.tsx",{"content":"import type { Metadata } from \"next\"\nimport { env } from \"@/env.js\"\n\nimport {\n  PageHeader,\n  PageHeaderDescription,\n  PageHeaderHeading,\n} from \"@/components/page-header\"\nimport { Shell } from \"@/components/shell\"\nimport { LogOutButtons } from \"@/app/(auth)/_components/logout-buttons\"\n\nexport const metadata: Metadata = {\n  metadataBase: new URL(env.NEXT_PUBLIC_APP_URL),\n  title: \"Sign out\",\n  description: \"Sign out of your account\",\n}\n\nexport default function SignOutPage() {\n  return (\n    <Shell className=\"max-w-md\">\n      <PageHeader className=\"text-center\">\n        <PageHeaderHeading size=\"sm\">Sign out</PageHeaderHeading>\n        <PageHeaderDescription size=\"sm\">\n          Are you sure you want to sign out?\n        </PageHeaderDescription>\n      </PageHeader>\n      <LogOutButtons />\n    </Shell>\n  )\n}\n"}],["C:\\Users\\Home\\Desktop\\skateshop-main\\src\\components\\page-header.tsx",{"content":"// @see https://github.com/shadcn-ui/ui/blob/main/apps/www/components/page-header.tsx\n\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\ninterface PageHeaderProps extends React.HTMLAttributes<HTMLDivElement> {\n  as?: React.ElementType\n  withPadding?: boolean\n}\n\nfunction PageHeader({\n  className,\n  children,\n  as: Comp = \"section\",\n  withPadding = false,\n  ...props\n}: PageHeaderProps) {\n  return (\n    <Comp\n      className={cn(\n        \"flex max-w-[61.25rem] flex-col gap-1\",\n        withPadding && \"py-8 md:py-12 md:pb-8 lg:py-24 lg:pb-20\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </Comp>\n  )\n}\n\nconst headingVariants = cva(\n  \"font-bold leading-tight tracking-tighter lg:leading-[1.1]\",\n  {\n    variants: {\n      size: {\n        default: \"text-3xl md:text-5xl\",\n        sm: \"text-xl md:text-3xl\",\n        lg: \"text-3xl sm:text-5xl md:text-6xl lg:text-7xl\",\n      },\n    },\n    defaultVariants: {\n      size: \"default\",\n    },\n  }\n)\n\ninterface PageHeaderHeadingProps\n  extends React.HTMLAttributes<HTMLHeadingElement>,\n    VariantProps<typeof headingVariants> {\n  as?: \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\"\n}\n\nfunction PageHeaderHeading({\n  className,\n  size,\n  as: Comp = \"h1\",\n  ...props\n}: PageHeaderHeadingProps) {\n  return (\n    <Comp className={cn(headingVariants({ size, className }))} {...props} />\n  )\n}\n\nconst descriptionVariants = cva(\n  \"max-w-[46.875rem] text-balance text-muted-foreground\",\n  {\n    variants: {\n      size: {\n        default: \"text-base sm:text-lg\",\n        sm: \"text-sm sm:text-base\",\n        lg: \"text-lg sm:text-xl\",\n      },\n    },\n    defaultVariants: {\n      size: \"default\",\n    },\n  }\n)\n\ninterface PageHeaderDescriptionProps\n  extends React.HTMLAttributes<HTMLParagraphElement>,\n    VariantProps<typeof descriptionVariants> {}\n\nfunction PageHeaderDescription({\n  className,\n  size,\n  ...props\n}: PageHeaderDescriptionProps) {\n  return (\n    <p className={cn(descriptionVariants({ size, className }))} {...props} />\n  )\n}\n\nfunction PageActions({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\n        \"flex w-full items-center justify-center space-x-4 py-4 md:pb-10\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { PageActions, PageHeader, PageHeaderDescription, PageHeaderHeading }\n","originalImport":"@/components/page-header","alias":true}],["C:\\Users\\Home\\Desktop\\skateshop-main\\src\\app\\(auth)\\_components\\logout-buttons.tsx",{"content":"\"use client\"\n\nimport { useRouter } from \"next/navigation\"\nimport { SignOutButton } from \"@clerk/nextjs\"\n\nimport { cn } from \"@/lib/utils\"\nimport { useMounted } from \"@/hooks/use-mounted\"\nimport { Button, buttonVariants } from \"@/components/ui/button\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\n\nexport function LogOutButtons() {\n  const router = useRouter()\n  const mounted = useMounted()\n\n  return (\n    <div className=\"flex w-full flex-col-reverse items-center gap-2 sm:flex-row\">\n      <Button\n        variant=\"secondary\"\n        size=\"sm\"\n        className=\"w-full\"\n        onClick={() => router.back()}\n      >\n        Go back\n        <span className=\"sr-only\">Previous page</span>\n      </Button>\n      {mounted ? (\n        <SignOutButton\n          redirectUrl={`${window.location.origin}/?redirect=false`}\n        >\n          <Button size=\"sm\" className=\"w-full\">\n            Log out\n            <span className=\"sr-only\">Log out</span>\n          </Button>\n        </SignOutButton>\n      ) : (\n        <Skeleton\n          className={cn(\n            buttonVariants({ size: \"sm\" }),\n            \"w-full bg-muted text-muted-foreground\"\n          )}\n        >\n          Log out\n        </Skeleton>\n      )}\n    </div>\n  )\n}\n","originalImport":"@/app/(auth)/_components/logout-buttons","alias":true}],["C:\\Users\\Home\\Desktop\\skateshop-main\\src\\hooks\\use-mounted.ts",{"content":"import * as React from \"react\"\n\nexport function useMounted() {\n  const [mounted, setMounted] = React.useState(false)\n\n  React.useEffect(() => {\n    setMounted(true)\n\n    return () => setMounted(false)\n  }, [])\n\n  return mounted\n}\n","originalImport":"@/hooks/use-mounted","alias":true}],["C:\\Users\\Home\\Desktop\\skateshop-main\\src\\app\\(auth)\\signup\\verify-email\\[[...verify-email]]\\page.tsx",{"content":"import { type Metadata } from \"next\"\nimport { env } from \"@/env.js\"\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport { Shell } from \"@/components/shell\"\nimport { VerifyEmailForm } from \"@/app/(auth)/_components/verify-email-form\"\n\nexport const metadata: Metadata = {\n  metadataBase: new URL(env.NEXT_PUBLIC_APP_URL),\n  title: \"Verify Email\",\n  description: \"Verify your email address to continue with your sign up\",\n}\n\nexport default function VerifyEmailPage() {\n  return (\n    <Shell className=\"max-w-lg\">\n      <Card>\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-2xl\">Verify email</CardTitle>\n          <CardDescription>\n            Verify your email address to complete your account creation\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"grid gap-4\">\n          <VerifyEmailForm />\n        </CardContent>\n      </Card>\n    </Shell>\n  )\n}\n"}],["C:\\Users\\Home\\Desktop\\skateshop-main\\src\\app\\(auth)\\_components\\verify-email-form.tsx",{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { useRouter } from \"next/navigation\"\nimport { useSignUp } from \"@clerk/nextjs\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm } from \"react-hook-form\"\nimport type { z } from \"zod\"\n\nimport { showErrorToast } from \"@/lib/handle-error\"\nimport { verifyEmailSchema } from \"@/lib/validations/auth\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\"\nimport { Input } from \"@/components/ui/input\"\nimport { Icons } from \"@/components/icons\"\n\ntype Inputs = z.infer<typeof verifyEmailSchema>\n\nexport function VerifyEmailForm() {\n  const router = useRouter()\n  const { isLoaded, signUp, setActive } = useSignUp()\n  const [loading, setLoading] = React.useState(false)\n\n  // react-hook-form\n  const form = useForm<Inputs>({\n    resolver: zodResolver(verifyEmailSchema),\n    defaultValues: {\n      code: \"\",\n    },\n  })\n\n  async function onSubmit(data: Inputs) {\n    if (!isLoaded) return\n\n    setLoading(true)\n\n    try {\n      const completeSignUp = await signUp.attemptEmailAddressVerification({\n        code: data.code,\n      })\n      if (completeSignUp.status !== \"complete\") {\n        /*  investigate the response, to see if there was an error\n             or if the user needs to complete more steps.*/\n        console.log(JSON.stringify(completeSignUp, null, 2))\n      }\n      if (completeSignUp.status === \"complete\") {\n        await setActive({ session: completeSignUp.createdSessionId })\n\n        router.push(`${window.location.origin}/`)\n      }\n    } catch (err) {\n      showErrorToast(err)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <Form {...form}>\n      <form className=\"grid gap-4\" onSubmit={form.handleSubmit(onSubmit)}>\n        <FormField\n          control={form.control}\n          name=\"code\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Verification Code</FormLabel>\n              <FormControl>\n                <Input\n                  placeholder=\"169420\"\n                  {...field}\n                  onChange={(e) => {\n                    e.target.value = e.target.value.trim()\n                    field.onChange(e)\n                  }}\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button className=\"mt-2\" disabled={loading}>\n          {loading && (\n            <Icons.spinner\n              className=\"mr-2 size-4 animate-spin\"\n              aria-hidden=\"true\"\n            />\n          )}\n          Create account\n          <span className=\"sr-only\">Create account</span>\n        </Button>\n      </form>\n    </Form>\n  )\n}\n","originalImport":"@/app/(auth)/_components/verify-email-form","alias":true}],["C:\\Users\\Home\\Desktop\\skateshop-main\\src\\app\\(auth)\\signup\\[[...signup]]\\page.tsx",{"content":"import { type Metadata } from \"next\"\nimport Link from \"next/link\"\nimport { env } from \"@/env.js\"\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport { Shell } from \"@/components/shell\"\nimport { OAuthSignIn } from \"../../_components/oauth-signin\"\nimport { SignUpForm } from \"../../_components/signup-form\"\n\nexport const metadata: Metadata = {\n  metadataBase: new URL(env.NEXT_PUBLIC_APP_URL),\n  title: \"Sign Up\",\n  description: \"Sign up for an account\",\n}\n\nexport default function SignUpPage() {\n  return (\n    <Shell className=\"max-w-lg\">\n      <Card>\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-2xl\">Sign up</CardTitle>\n          <CardDescription>\n            Choose your preferred sign up method\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"grid gap-4\">\n          <OAuthSignIn />\n          <div className=\"relative\">\n            <div className=\"absolute inset-0 flex items-center\">\n              <span className=\"w-full border-t\" />\n            </div>\n            <div className=\"relative flex justify-center text-xs uppercase\">\n              <span className=\"bg-background px-2 text-muted-foreground\">\n                Or continue with\n              </span>\n            </div>\n          </div>\n          <SignUpForm />\n        </CardContent>\n        <CardFooter>\n          <div className=\"text-sm text-muted-foreground\">\n            Already have an account?{\" \"}\n            <Link\n              aria-label=\"Sign in\"\n              href=\"/signin\"\n              className=\"text-primary underline-offset-4 transition-colors hover:underline\"\n            >\n              Sign in\n            </Link>\n          </div>\n        </CardFooter>\n      </Card>\n    </Shell>\n  )\n}\n"}],["C:\\Users\\Home\\Desktop\\skateshop-main\\src\\app\\(auth)\\_components\\signup-form.tsx",{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { useRouter } from \"next/navigation\"\nimport { useSignUp } from \"@clerk/nextjs\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm } from \"react-hook-form\"\nimport { toast } from \"sonner\"\nimport type { z } from \"zod\"\n\nimport { showErrorToast } from \"@/lib/handle-error\"\nimport { authSchema } from \"@/lib/validations/auth\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\"\nimport { Input } from \"@/components/ui/input\"\nimport { Icons } from \"@/components/icons\"\nimport { PasswordInput } from \"@/components/password-input\"\n\ntype Inputs = z.infer<typeof authSchema>\n\nexport function SignUpForm() {\n  const router = useRouter()\n  const { isLoaded, signUp } = useSignUp()\n  const [loading, setLoading] = React.useState(false)\n\n  // react-hook-form\n  const form = useForm<Inputs>({\n    resolver: zodResolver(authSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  })\n\n  async function onSubmit(data: Inputs) {\n    if (!isLoaded) return\n\n    setLoading(true)\n\n    try {\n      await signUp.create({\n        emailAddress: data.email,\n        password: data.password,\n      })\n\n      // Send email verification code\n      await signUp.prepareEmailAddressVerification({\n        strategy: \"email_code\",\n      })\n\n      router.push(\"/signup/verify-email\")\n      toast.message(\"Check your email\", {\n        description: \"We sent you a 6-digit verification code.\",\n      })\n    } catch (err) {\n      showErrorToast(err)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <Form {...form}>\n      <form className=\"grid gap-4\" onSubmit={form.handleSubmit(onSubmit)}>\n        <FormField\n          control={form.control}\n          name=\"email\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Email</FormLabel>\n              <FormControl>\n                <Input placeholder=\"rodneymullen180@gmail.com\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"password\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Password</FormLabel>\n              <FormControl>\n                <PasswordInput placeholder=\"**********\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button className=\"mt-2\" disabled={loading}>\n          {loading && (\n            <Icons.spinner\n              className=\"mr-2 size-4 animate-spin\"\n              aria-hidden=\"true\"\n            />\n          )}\n          Continue\n          <span className=\"sr-only\">Continue to email verification page</span>\n        </Button>\n      </form>\n    </Form>\n  )\n}\n","originalImport":"../../_components/signup-form","alias":false}],["C:\\Users\\Home\\Desktop\\skateshop-main\\src\\app\\(auth)\\sso-callback\\[[...sso-callback]]\\page.tsx",{"content":"import { AuthenticateWithRedirectCallback } from \"@clerk/nextjs\"\n\nimport { Icons } from \"@/components/icons\"\nimport { Shell } from \"@/components/shell\"\n\nexport default function SSOCallbackPage() {\n  return (\n    <Shell className=\"max-w-lg place-items-center\">\n      <Icons.spinner className=\"size-16 animate-spin\" aria-hidden=\"true\" />\n      <AuthenticateWithRedirectCallback />\n    </Shell>\n  )\n}\n"}],["C:\\Users\\Home\\Desktop\\skateshop-main\\src\\app\\(auth)\\_components\\sso-callback.tsx",{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { useClerk } from \"@clerk/nextjs\"\nimport { type HandleOAuthCallbackParams } from \"@clerk/types\"\n\nimport { Icons } from \"@/components/icons\"\n\ninterface SSOCallbackProps {\n  searchParams: HandleOAuthCallbackParams\n}\n\nexport function SSOCallback({ searchParams }: SSOCallbackProps) {\n  const { handleRedirectCallback } = useClerk()\n\n  React.useEffect(() => {\n    void handleRedirectCallback(searchParams)\n  }, [searchParams, handleRedirectCallback])\n\n  return (\n    <div\n      role=\"status\"\n      aria-label=\"Loading\"\n      aria-describedby=\"loading-description\"\n      className=\"flex items-center justify-center\"\n    >\n      <Icons.spinner className=\"size-16 animate-spin\" aria-hidden=\"true\" />\n    </div>\n  )\n}\n"}]],"moduleName":"auth","componentType":"page"}