{"moduleName":"signin","entryFile":"page.tsx","absoluteEntryFile":"D:\\Program Files\\Desktop\\skateshop-main\\src\\app\\(auth)\\signin\\[[...signin]]\\page.tsx","dependencies":{"local":[{"original":"@/env.js","resolved":"..\\..\\..\\..\\env.js","replacedImport":"..\\..\\..\\..\\env.js","content":"import { createEnv } from \"@t3-oss/env-nextjs\"\nimport { z } from \"zod\"\n\nexport const env = createEnv({\n  /**\n   * Specify your server-side environment variables schema here. This way you can ensure the app\n   * isn't built with invalid env vars.\n   */\n  server: {\n    NODE_ENV: z\n      .enum([\"development\", \"test\", \"production\"])\n      .default(\"development\"),\n    DATABASE_URL: z.string().url(),\n    CLERK_SECRET_KEY: z.string().min(1),\n    RESEND_API_KEY: z.string().min(1),\n    EMAIL_FROM_ADDRESS: z.string().email(),\n    UPLOADTHING_SECRET: z.string().min(1),\n    UPLOADTHING_APP_ID: z.string().min(1),\n    UPSTASH_REDIS_REST_URL: z.string().url(),\n    UPSTASH_REDIS_REST_TOKEN: z.string().min(1),\n    STRIPE_API_KEY: z.string().min(1),\n    STRIPE_WEBHOOK_SECRET: z.string().min(1),\n    STRIPE_STD_MONTHLY_PRICE_ID: z.string().min(1),\n    STRIPE_PRO_MONTHLY_PRICE_ID: z.string().min(1),\n  },\n\n  /**\n   * Specify your client-side environment variables schema here. This way you can ensure the app\n   * isn't built with invalid env vars. To expose them to the client, prefix them with\n   * `NEXT_PUBLIC_`.\n   */\n  client: {\n    NEXT_PUBLIC_APP_URL: z.string().url(),\n    NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: z.string(),\n    NEXT_PUBLIC_CLERK_SIGN_IN_URL: z.string().min(1),\n    NEXT_PUBLIC_CLERK_SIGN_UP_URL: z.string().min(1),\n    NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: z.string(),\n  },\n\n  /**\n   * You can't destruct `process.env` as a regular object in the Next.js edge runtimes (e.g.\n   * middlewares) or client-side so we need to destruct manually.\n   */\n  runtimeEnv: {\n    NODE_ENV: process.env.NODE_ENV,\n    DATABASE_URL: process.env.DATABASE_URL,\n    NEXT_PUBLIC_APP_URL: process.env.NEXT_PUBLIC_APP_URL,\n    NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY:\n      process.env.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY,\n    NEXT_PUBLIC_CLERK_SIGN_IN_URL: process.env.NEXT_PUBLIC_CLERK_SIGN_IN_URL,\n    NEXT_PUBLIC_CLERK_SIGN_UP_URL: process.env.NEXT_PUBLIC_CLERK_SIGN_UP_URL,\n    CLERK_SECRET_KEY: process.env.CLERK_SECRET_KEY,\n    RESEND_API_KEY: process.env.RESEND_API_KEY,\n    EMAIL_FROM_ADDRESS: process.env.EMAIL_FROM_ADDRESS,\n    UPLOADTHING_SECRET: process.env.UPLOADTHING_SECRET,\n    UPLOADTHING_APP_ID: process.env.UPLOADTHING_APP_ID,\n    UPSTASH_REDIS_REST_URL: process.env.UPSTASH_REDIS_REST_URL,\n    UPSTASH_REDIS_REST_TOKEN: process.env.UPSTASH_REDIS_REST_TOKEN,\n    NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY:\n      process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY,\n    STRIPE_API_KEY: process.env.STRIPE_API_KEY,\n    STRIPE_WEBHOOK_SECRET: process.env.STRIPE_WEBHOOK_SECRET,\n    STRIPE_STD_MONTHLY_PRICE_ID: process.env.STRIPE_STD_MONTHLY_PRICE_ID,\n    STRIPE_PRO_MONTHLY_PRICE_ID: process.env.STRIPE_PRO_MONTHLY_PRICE_ID,\n  },\n  /**\n   * Run `build` or `dev` with `SKIP_ENV_VALIDATION` to skip env validation. This is especially\n   * useful for Docker builds.\n   */\n  skipValidation: !!process.env.SKIP_ENV_VALIDATION,\n  /**\n   * Makes it so that empty strings are treated as undefined. `SOME_VAR: z.string()` and\n   * `SOME_VAR=''` will throw an error.\n   */\n  emptyStringAsUndefined: true,\n})\n","dependencies":{"local":[],"thirdParty":[{"original":"@t3-oss/env-nextjs","resolved":"@t3-oss/env-nextjs","replacedImport":"@t3-oss/env-nextjs","content":null,"dependencies":[],"isDynamic":false,"importType":"import"},{"original":"zod","resolved":"zod","replacedImport":"zod","content":null,"dependencies":[],"isDynamic":false,"importType":"import"}],"dynamic":[],"require":[],"core":[]},"isDynamic":false,"importType":"import"},{"original":"@/components/ui/card","resolved":"..\\..\\..\\..\\components\\ui\\card.tsx","replacedImport":"..\\..\\..\\..\\components\\ui\\card.tsx","content":"import * as React from \"react\"\n\nimport { cn } from \"..\\..\\lib\\utils.ts\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & {\n    as?: \"div\" | \"section\" | \"article\"\n  }\n>(({ className, as: Comp = \"div\", ...props }, ref) => (\n  <Comp\n    ref={ref}\n    className={cn(\n      \"rounded-xl border bg-card text-card-foreground shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement> & { as?: \"h1\" | \"h2\" | \"h3\" | \"h4\" }\n>(({ className, as: Comp = \"h3\", ...props }, ref) => (\n  <Comp\n    ref={ref}\n    className={cn(\"font-semibold leading-tight tracking-tight\", className)}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle }\n","dependencies":{"local":[{"original":"@/lib/utils","resolved":"..\\..\\..\\..\\lib\\utils.ts","replacedImport":"..\\..\\lib\\utils.ts","content":"import { env } from \"..\\env.js\"\nimport type { User } from \"@clerk/nextjs/server\"\nimport { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function absoluteUrl(path: string) {\n  return `${env.NEXT_PUBLIC_APP_URL}${path}`\n}\n\nexport function formatPrice(\n  price: number | string,\n  opts: Intl.NumberFormatOptions = {}\n) {\n  return new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: opts.currency ?? \"USD\",\n    notation: opts.notation ?? \"compact\",\n    ...opts,\n  }).format(Number(price))\n}\n\nexport function formatNumber(\n  number: number | string,\n  opts: Intl.NumberFormatOptions = {}\n) {\n  return new Intl.NumberFormat(\"en-US\", {\n    style: opts.style ?? \"decimal\",\n    notation: opts.notation ?? \"standard\",\n    minimumFractionDigits: opts.minimumFractionDigits ?? 0,\n    maximumFractionDigits: opts.maximumFractionDigits ?? 2,\n    ...opts,\n  }).format(Number(number))\n}\n\nexport function formatDate(\n  date: Date | string | number,\n  opts: Intl.DateTimeFormatOptions = {}\n) {\n  return new Intl.DateTimeFormat(\"en-US\", {\n    month: opts.month ?? \"long\",\n    day: opts.day ?? \"numeric\",\n    year: opts.year ?? \"numeric\",\n    ...opts,\n  }).format(new Date(date))\n}\n\nexport function formatBytes(\n  bytes: number,\n  decimals = 0,\n  sizeType: \"accurate\" | \"normal\" = \"normal\"\n) {\n  const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\"]\n  const accurateSizes = [\"Bytes\", \"KiB\", \"MiB\", \"GiB\", \"TiB\"]\n  if (bytes === 0) return \"0 Byte\"\n  const i = Math.floor(Math.log(bytes) / Math.log(1024))\n  return `${(bytes / Math.pow(1024, i)).toFixed(decimals)} ${\n    sizeType === \"accurate\"\n      ? (accurateSizes[i] ?? \"Bytest\")\n      : (sizes[i] ?? \"Bytes\")\n  }`\n}\n\nexport function formatId(id: string) {\n  return `#${id.toString().padStart(4, \"0\")}`\n}\n\nexport function slugify(str: string) {\n  return str\n    .toLowerCase()\n    .replace(/ /g, \"-\")\n    .replace(/[^\\w-]+/g, \"\")\n    .replace(/--+/g, \"-\")\n}\n\nexport function unslugify(str: string) {\n  return str.replace(/-/g, \" \")\n}\n\nexport function toTitleCase(str: string) {\n  return str.replace(\n    /\\w\\S*/g,\n    (txt) => txt.charAt(0).toUpperCase() + txt.slice(1).toLowerCase()\n  )\n}\n\nexport function toSentenceCase(str: string) {\n  return str\n    .replace(/([A-Z])/g, \" $1\")\n    .replace(/^./, (str) => str.toUpperCase())\n}\n\nexport function truncate(str: string, length: number) {\n  return str.length > length ? `${str.substring(0, length)}...` : str\n}\n\nexport function getUserEmail(user: User | null) {\n  const email =\n    user?.emailAddresses?.find((e) => e.id === user.primaryEmailAddressId)\n      ?.emailAddress ?? \"\"\n\n  return email\n}\n\nexport function isMacOs() {\n  if (typeof window === \"undefined\") return false\n\n  return window.navigator.userAgent.includes(\"Mac\")\n}\n","dependencies":{"local":[{"original":"@/env.js","resolved":"..\\..\\..\\..\\env.js","replacedImport":"..\\env.js","content":null,"dependencies":[],"isDynamic":false,"importType":"import"}],"thirdParty":[{"original":"@clerk/nextjs/server","resolved":"@clerk/nextjs/server","replacedImport":"@clerk/nextjs/server","content":null,"dependencies":[],"isDynamic":false,"importType":"import"},{"original":"clsx","resolved":"clsx","replacedImport":"clsx","content":null,"dependencies":[],"isDynamic":false,"importType":"import"},{"original":"tailwind-merge","resolved":"tailwind-merge","replacedImport":"tailwind-merge","content":null,"dependencies":[],"isDynamic":false,"importType":"import"}],"dynamic":[],"require":[],"core":[]},"isDynamic":false,"importType":"import"}],"thirdParty":[{"original":"react","resolved":"react","replacedImport":"react","content":null,"dependencies":[],"isDynamic":false,"importType":"import"}],"dynamic":[],"require":[],"core":[]},"isDynamic":false,"importType":"import"},{"original":"@/components/shell","resolved":"..\\..\\..\\..\\components\\shell.tsx","replacedImport":"..\\..\\..\\..\\components\\shell.tsx","content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"..\\lib\\utils.ts\"\n\nconst shellVariants = cva(\"grid items-center gap-8 pb-8 pt-6 lg:py-6\", {\n  variants: {\n    variant: {\n      default: \"container\",\n      sidebar: \"\",\n      centered: \"container flex h-dvh max-w-2xl flex-col justify-center\",\n      markdown: \"container max-w-3xl py-8 md:py-10\",\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n  },\n})\n\ninterface ShellProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof shellVariants> {\n  as?: React.ElementType\n}\n\nfunction Shell({\n  className,\n  as: Comp = \"section\",\n  variant,\n  ...props\n}: ShellProps) {\n  return (\n    <Comp className={cn(shellVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Shell, shellVariants }\n","dependencies":{"local":[{"original":"@/lib/utils","resolved":"..\\..\\..\\..\\lib\\utils.ts","replacedImport":"..\\lib\\utils.ts","content":null,"dependencies":[],"isDynamic":false,"importType":"import"}],"thirdParty":[{"original":"react","resolved":"react","replacedImport":"react","content":null,"dependencies":[],"isDynamic":false,"importType":"import"},{"original":"class-variance-authority","resolved":"class-variance-authority","replacedImport":"class-variance-authority","content":null,"dependencies":[],"isDynamic":false,"importType":"import"}],"dynamic":[],"require":[],"core":[]},"isDynamic":false,"importType":"import"},{"original":"@/app/(auth)/_components/oauth-signin","resolved":"..\\..\\_components\\oauth-signin.tsx","replacedImport":"..\\..\\_components\\oauth-signin.tsx","content":"\"use client\"\n\nimport * as React from \"react\"\nimport { useSignIn } from \"@clerk/nextjs\"\nimport { type OAuthStrategy } from \"@clerk/types\"\n\nimport { showErrorToast } from \"..\\..\\..\\lib\\handle-error.ts\"\nimport { Button } from \"..\\..\\..\\components\\ui\\button.tsx\"\nimport { Icons } from \"..\\..\\..\\components\\icons.tsx\"\n\nconst oauthProviders = [\n  { name: \"Google\", strategy: \"oauth_google\", icon: \"google\" },\n  { name: \"Discord\", strategy: \"oauth_discord\", icon: \"discord\" },\n] satisfies {\n  name: string\n  icon: keyof typeof Icons\n  strategy: OAuthStrategy\n}[]\n\nexport function OAuthSignIn() {\n  const [loading, setLoading] = React.useState<OAuthStrategy | null>(null)\n  const { signIn, isLoaded: signInLoaded } = useSignIn()\n\n  async function oauthSignIn(provider: OAuthStrategy) {\n    if (!signInLoaded) return null\n\n    try {\n      setLoading(provider)\n      await signIn.authenticateWithRedirect({\n        strategy: provider,\n        redirectUrl: \"/sso-callback\",\n        redirectUrlComplete: \"/\",\n      })\n    } catch (err) {\n      setLoading(null)\n      showErrorToast(err)\n    }\n  }\n\n  return (\n    <div className=\"flex flex-col items-center gap-2 sm:flex-row sm:gap-4\">\n      {oauthProviders.map((provider) => {\n        const Icon = Icons[provider.icon]\n\n        return (\n          <Button\n            key={provider.strategy}\n            variant=\"outline\"\n            className=\"w-full bg-background\"\n            onClick={() => void oauthSignIn(provider.strategy)}\n            disabled={loading !== null}\n          >\n            {loading === provider.strategy ? (\n              <Icons.spinner\n                className=\"mr-2 size-4 animate-spin\"\n                aria-hidden=\"true\"\n              />\n            ) : (\n              <Icon className=\"mr-2 size-4\" aria-hidden=\"true\" />\n            )}\n            {provider.name}\n            <span className=\"sr-only\">{provider.name}</span>\n          </Button>\n        )\n      })}\n    </div>\n  )\n}\n","dependencies":{"local":[{"original":"@/lib/handle-error","resolved":"..\\..\\..\\..\\lib\\handle-error.ts","replacedImport":"..\\..\\..\\lib\\handle-error.ts","content":"import { isClerkAPIResponseError } from \"@clerk/nextjs/errors\"\nimport { toast } from \"sonner\"\nimport * as z from \"zod\"\n\nimport { unknownError } from \"constants.ts\"\n\nexport function getErrorMessage(err: unknown) {\n  if (err instanceof z.ZodError) {\n    return err.errors[0]?.message ?? unknownError\n  } else if (isClerkAPIResponseError(err)) {\n    return err.errors[0]?.longMessage ?? unknownError\n  } else if (err instanceof Error) {\n    return err.message\n  } else {\n    return unknownError\n  }\n}\n\nexport function showErrorToast(err: unknown) {\n  const errorMessage = getErrorMessage(err)\n  console.log({ errorMessage })\n\n  return toast.error(errorMessage)\n}\n","dependencies":{"local":[{"original":"@/lib/constants","resolved":"..\\..\\..\\..\\lib\\constants.ts","replacedImport":"constants.ts","content":"export const unknownError = \"An unknown error occurred. Please try again later.\"\n\nexport const redirects = {\n  toLogin: \"/signin\",\n  toSignup: \"/signup\",\n  afterLogin: \"/dashboard/stores\",\n  afterLogout: \"/\",\n  toVerify: \"/verify-email\",\n  afterVerify: \"/dashboard/stores\",\n} as const\n","dependencies":{"local":[],"thirdParty":[],"dynamic":[],"require":[],"core":[]},"isDynamic":false,"importType":"import"}],"thirdParty":[{"original":"@clerk/nextjs/errors","resolved":"@clerk/nextjs/errors","replacedImport":"@clerk/nextjs/errors","content":null,"dependencies":[],"isDynamic":false,"importType":"import"},{"original":"sonner","resolved":"sonner","replacedImport":"sonner","content":null,"dependencies":[],"isDynamic":false,"importType":"import"},{"original":"zod","resolved":"zod","replacedImport":"zod","content":null,"dependencies":[],"isDynamic":false,"importType":"import"}],"dynamic":[],"require":[],"core":[]},"isDynamic":false,"importType":"import"},{"original":"@/components/ui/button","resolved":"..\\..\\..\\..\\components\\ui\\button.tsx","replacedImport":"..\\..\\..\\components\\ui\\button.tsx","content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"..\\..\\lib\\utils.ts\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","dependencies":{"local":[{"original":"@/lib/utils","resolved":"..\\..\\..\\..\\lib\\utils.ts","replacedImport":"..\\..\\lib\\utils.ts","content":null,"dependencies":[],"isDynamic":false,"importType":"import"}],"thirdParty":[{"original":"react","resolved":"react","replacedImport":"react","content":null,"dependencies":[],"isDynamic":false,"importType":"import"},{"original":"@radix-ui/react-slot","resolved":"@radix-ui/react-slot","replacedImport":"@radix-ui/react-slot","content":null,"dependencies":[],"isDynamic":false,"importType":"import"},{"original":"class-variance-authority","resolved":"class-variance-authority","replacedImport":"class-variance-authority","content":null,"dependencies":[],"isDynamic":false,"importType":"import"}],"dynamic":[],"require":[],"core":[]},"isDynamic":false,"importType":"import"},{"original":"@/components/icons","resolved":"..\\..\\..\\..\\components\\icons.tsx","replacedImport":"..\\..\\..\\components\\icons.tsx","content":"import {\n  AvatarIcon,\n  ChevronLeftIcon,\n  GearIcon,\n  HomeIcon,\n  ImageIcon,\n} from \"@radix-ui/react-icons\"\n\nexport type IconProps = React.HTMLAttributes<SVGElement>\n\nexport const Icons = {\n  logo: (props: IconProps) => (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      strokeWidth=\"1.5\"\n      stroke=\"currentColor\"\n      fill=\"none\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      {...props}\n    >\n      <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <circle cx=\"7\" cy=\"15\" r=\"2\" />\n      <circle cx=\"17\" cy=\"15\" r=\"2\" />\n      <path d=\"M3 9a2 1 0 0 0 2 1h14a2 1 0 0 0 2 -1\" />\n    </svg>\n  ),\n  menu: ({ ...props }: IconProps) => (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      strokeWidth=\"1.5\"\n      {...props}\n    >\n      <path\n        d=\"M3 5H11\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      ></path>\n      <path\n        d=\"M3 12H16\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      ></path>\n      <path\n        d=\"M3 19H21\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      ></path>\n    </svg>\n  ),\n  nextjs: (props: IconProps) => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" {...props}>\n      <path\n        fill=\"currentColor\"\n        d=\"M11.572 0c-.176 0-.31.001-.358.007a19.76 19.76 0 0 1-.364.033C7.443.346 4.25 2.185 2.228 5.012a11.875 11.875 0 0 0-2.119 5.243c-.096.659-.108.854-.108 1.747s.012 1.089.108 1.748c.652 4.506 3.86 8.292 8.209 9.695.779.25 1.6.422 2.534.525.363.04 1.935.04 2.299 0 1.611-.178 2.977-.577 4.323-1.264.207-.106.247-.134.219-.158-.02-.013-.9-1.193-1.955-2.62l-1.919-2.592-2.404-3.558a338.739 338.739 0 0 0-2.422-3.556c-.009-.002-.018 1.579-.023 3.51-.007 3.38-.01 3.515-.052 3.595a.426.426 0 0 1-.206.214c-.075.037-.14.044-.495.044H7.81l-.108-.068a.438.438 0 0 1-.157-.171l-.05-.106.006-4.703.007-4.705.072-.092a.645.645 0 0 1 .174-.143c.096-.047.134-.051.54-.051.478 0 .558.018.682.154.035.038 1.337 1.999 2.895 4.361a10760.433 10760.433 0 0 0 4.735 7.17l1.9 2.879.096-.063a12.317 12.317 0 0 0 2.466-2.163 11.944 11.944 0 0 0 2.824-6.134c.096-.66.108-.854.108-1.748 0-.893-.012-1.088-.108-1.747-.652-4.506-3.859-8.292-8.208-9.695a12.597 12.597 0 0 0-2.499-.523A33.119 33.119 0 0 0 11.573 0zm4.069 7.217c.347 0 .408.005.486.047a.473.473 0 0 1 .237.277c.018.06.023 1.365.018 4.304l-.006 4.218-.744-1.14-.746-1.14v-3.066c0-1.982.01-3.097.023-3.15a.478.478 0 0 1 .233-.296c.096-.05.13-.054.5-.054z\"\n      />\n    </svg>\n  ),\n  gitHub: (props: IconProps) => (\n    <svg viewBox=\"0 0 438.549 438.549\" {...props}>\n      <path\n        fill=\"currentColor\"\n        d=\"M409.132 114.573c-19.608-33.596-46.205-60.194-79.798-79.8-33.598-19.607-70.277-29.408-110.063-29.408-39.781 0-76.472 9.804-110.063 29.408-33.596 19.605-60.192 46.204-79.8 79.8C9.803 148.168 0 184.854 0 224.63c0 47.78 13.94 90.745 41.827 128.906 27.884 38.164 63.906 64.572 108.063 79.227 5.14.954 8.945.283 11.419-1.996 2.475-2.282 3.711-5.14 3.711-8.562 0-.571-.049-5.708-.144-15.417a2549.81 2549.81 0 01-.144-25.406l-6.567 1.136c-4.187.767-9.469 1.092-15.846 1-6.374-.089-12.991-.757-19.842-1.999-6.854-1.231-13.229-4.086-19.13-8.559-5.898-4.473-10.085-10.328-12.56-17.556l-2.855-6.57c-1.903-4.374-4.899-9.233-8.992-14.559-4.093-5.331-8.232-8.945-12.419-10.848l-1.999-1.431c-1.332-.951-2.568-2.098-3.711-3.429-1.142-1.331-1.997-2.663-2.568-3.997-.572-1.335-.098-2.43 1.427-3.289 1.525-.859 4.281-1.276 8.28-1.276l5.708.853c3.807.763 8.516 3.042 14.133 6.851 5.614 3.806 10.229 8.754 13.846 14.842 4.38 7.806 9.657 13.754 15.846 17.847 6.184 4.093 12.419 6.136 18.699 6.136 6.28 0 11.704-.476 16.274-1.423 4.565-.952 8.848-2.383 12.847-4.285 1.713-12.758 6.377-22.559 13.988-29.41-10.848-1.14-20.601-2.857-29.264-5.14-8.658-2.286-17.605-5.996-26.835-11.14-9.235-5.137-16.896-11.516-22.985-19.126-6.09-7.614-11.088-17.61-14.987-29.979-3.901-12.374-5.852-26.648-5.852-42.826 0-23.035 7.52-42.637 22.557-58.817-7.044-17.318-6.379-36.732 1.997-58.24 5.52-1.715 13.706-.428 24.554 3.853 10.85 4.283 18.794 7.952 23.84 10.994 5.046 3.041 9.089 5.618 12.135 7.708 17.705-4.947 35.976-7.421 54.818-7.421s37.117 2.474 54.823 7.421l10.849-6.849c7.419-4.57 16.18-8.758 26.262-12.565 10.088-3.805 17.802-4.853 23.134-3.138 8.562 21.509 9.325 40.922 2.279 58.24 15.036 16.18 22.559 35.787 22.559 58.817 0 16.178-1.958 30.497-5.853 42.966-3.9 12.471-8.941 22.457-15.125 29.979-6.191 7.521-13.901 13.85-23.131 18.986-9.232 5.14-18.182 8.85-26.84 11.136-8.662 2.286-18.415 4.004-29.263 5.146 9.894 8.562 14.842 22.077 14.842 40.539v60.237c0 3.422 1.19 6.279 3.572 8.562 2.379 2.279 6.136 2.95 11.276 1.995 44.163-14.653 80.185-41.062 108.068-79.226 27.88-38.161 41.825-81.126 41.825-128.906-.01-39.771-9.818-76.454-29.414-110.049z\"\n      ></path>\n    </svg>\n  ),\n  google: ({ ...props }: IconProps) => (\n    <svg role=\"img\" viewBox=\"0 0 24 24\" {...props}>\n      <path\n        fill=\"currentColor\"\n        d=\"M12.48 10.92v3.28h7.84c-.24 1.84-.853 3.187-1.787 4.133-1.147 1.147-2.933 2.4-6.053 2.4-4.827 0-8.6-3.893-8.6-8.72s3.773-8.72 8.6-8.72c2.6 0 4.507 1.027 5.907 2.347l2.307-2.307C18.747 1.44 16.133 0 12.48 0 5.867 0 .307 5.387.307 12s5.56 12 12.173 12c3.573 0 6.267-1.173 8.373-3.36 2.16-2.16 2.84-5.213 2.84-7.667 0-.76-.053-1.467-.173-2.053H12.48z\"\n      />\n    </svg>\n  ),\n  x: (props: IconProps) => (\n    <svg\n      width=\"23\"\n      height=\"23\"\n      viewBox=\"0 0 1200 1227\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path d=\"M714.163 519.284L1160.89 0H1055.03L667.137 450.887L357.328 0H0L468.492 681.821L0 1226.37H105.866L515.491 750.218L842.672 1226.37H1200L714.137 519.284H714.163ZM569.165 687.828L521.697 619.934L144.011 79.6944H306.615L611.412 515.685L658.88 583.579L1055.08 1150.3H892.476L569.165 687.854V687.828Z\" />\n    </svg>\n  ),\n  facebook: ({ ...props }: IconProps) => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 320 512\" {...props}>\n      <path\n        fill=\"currentColor\"\n        d=\"M279.14 288l14.22-92.66h-88.91v-60.13c0-25.35 12.42-50.06 52.24-50.06h40.42V6.26S260.43 0 225.36 0c-73.22 0-121.08 44.38-121.08 124.72v70.62H22.89V288h81.39v224h100.17V288z\"\n      />\n    </svg>\n  ),\n  discord: ({ ...props }: IconProps) => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 640 512\" {...props}>\n      <path\n        fill=\"currentColor\"\n        d=\"M524.531,69.836a1.5,1.5,0,0,0-.764-.7A485.065,485.065,0,0,0,404.081,32.03a1.816,1.816,0,0,0-1.923.91,337.461,337.461,0,0,0-14.9,30.6,447.848,447.848,0,0,0-134.426,0,309.541,309.541,0,0,0-15.135-30.6,1.89,1.89,0,0,0-1.924-.91A483.689,483.689,0,0,0,116.085,69.137a1.712,1.712,0,0,0-.788.676C39.068,183.651,18.186,294.69,28.43,404.354a2.016,2.016,0,0,0,.765,1.375A487.666,487.666,0,0,0,176.02,479.918a1.9,1.9,0,0,0,2.063-.676A348.2,348.2,0,0,0,208.12,430.4a1.86,1.86,0,0,0-1.019-2.588,321.173,321.173,0,0,1-45.868-21.853,1.885,1.885,0,0,1-.185-3.126c3.082-2.309,6.166-4.711,9.109-7.137a1.819,1.819,0,0,1,1.9-.256c96.229,43.917,200.41,43.917,295.5,0a1.812,1.812,0,0,1,1.924.233c2.944,2.426,6.027,4.851,9.132,7.16a1.884,1.884,0,0,1-.162,3.126,301.407,301.407,0,0,1-45.89,21.83,1.875,1.875,0,0,0-1,2.611,391.055,391.055,0,0,0,30.014,48.815,1.864,1.864,0,0,0,2.063.7A486.048,486.048,0,0,0,610.7,405.729a1.882,1.882,0,0,0,.765-1.352C623.729,277.594,590.933,167.465,524.531,69.836ZM222.491,337.58c-28.972,0-52.844-26.587-52.844-59.239S193.056,219.1,222.491,219.1c29.665,0,53.306,26.82,52.843,59.239C275.334,310.993,251.924,337.58,222.491,337.58Zm195.38,0c-28.971,0-52.843-26.587-52.843-59.239S388.437,219.1,417.871,219.1c29.667,0,53.307,26.82,52.844,59.239C470.715,310.993,447.538,337.58,417.871,337.58Z\"\n      />\n    </svg>\n  ),\n  spinner: (props: IconProps) => (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      {...props}\n    >\n      <path d=\"M21 12a9 9 0 1 1-6.219-8.56\" />\n    </svg>\n  ),\n  cart: (props: IconProps) => (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      {...props}\n    >\n      <circle cx=\"8\" cy=\"21\" r=\"1\" />\n      <circle cx=\"19\" cy=\"21\" r=\"1\" />\n      <path d=\"M2.05 2.05h2l2.66 12.42a2 2 0 0 0 2 1.58h9.78a2 2 0 0 0 1.95-1.57l1.65-7.43H5.12\" />\n    </svg>\n  ),\n  product: (props: IconProps) => (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      {...props}\n    >\n      <path d=\"M21 8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16Z\" />\n      <path d=\"m3.3 7 8.7 5 8.7-5\" />\n      <path d=\"M12 22V12\" />\n    </svg>\n  ),\n  store: (props: IconProps) => (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      {...props}\n    >\n      <path d=\"m2 7 4.41-4.41A2 2 0 0 1 7.83 2h8.34a2 2 0 0 1 1.42.59L22 7\" />\n      <path d=\"M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8\" />\n      <path d=\"M15 22v-4a2 2 0 0 0-2-2h-2a2 2 0 0 0-2 2v4\" />\n      <path d=\"M2 7h20\" />\n      <path d=\"M22 7v3a2 2 0 0 1-2 2v0a2.7 2.7 0 0 1-1.59-.63.7.7 0 0 0-.82 0A2.7 2.7 0 0 1 16 12a2.7 2.7 0 0 1-1.59-.63.7.7 0 0 0-.82 0A2.7 2.7 0 0 1 12 12a2.7 2.7 0 0 1-1.59-.63.7.7 0 0 0-.82 0A2.7 2.7 0 0 1 8 12a2.7 2.7 0 0 1-1.59-.63.7.7 0 0 0-.82 0A2.7 2.7 0 0 1 4 12v0a2 2 0 0 1-2-2V7\" />\n    </svg>\n  ),\n  users: (props: IconProps) => (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      {...props}\n    >\n      <path d=\"M18 21a8 8 0 0 0-16 0\" />\n      <circle cx=\"10\" cy=\"8\" r=\"5\" />\n      <path d=\"M22 20c0-3.37-2-6.5-4-8a5 5 0 0 0-.45-8.3\" />\n    </svg>\n  ),\n  credit: (props: IconProps) => (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      {...props}\n    >\n      <rect width=\"20\" height=\"14\" x=\"2\" y=\"5\" rx=\"2\" />\n      <line x1=\"2\" x2=\"22\" y1=\"10\" y2=\"10\" />\n    </svg>\n  ),\n  dollarSign: (props: IconProps) => (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      {...props}\n    >\n      <line x1=\"12\" x2=\"12\" y1=\"2\" y2=\"22\" />\n      <path d=\"M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6\" />\n    </svg>\n  ),\n  activity: (props: IconProps) => (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      {...props}\n    >\n      <path d=\"M22 12h-4l-3 9L9 3l-3 9H2\" />\n    </svg>\n  ),\n  bot: (props: IconProps) => (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      {...props}\n    >\n      <path d=\"M12 8V4H8\" />\n      <rect width=\"16\" height=\"12\" x=\"4\" y=\"8\" rx=\"2\" />\n      <path d=\"M2 14h2\" />\n      <path d=\"M20 14h2\" />\n      <path d=\"M15 13v2\" />\n      <path d=\"M9 13v2\" />\n    </svg>\n  ),\n  robot: (props: IconProps) => (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      {...props}\n    >\n      <rect width=\"18\" height=\"10\" x=\"3\" y=\"11\" rx=\"2\" />\n      <circle cx=\"12\" cy=\"5\" r=\"2\" />\n      <path d=\"M12 7v4\" />\n      <line x1=\"8\" x2=\"8\" y1=\"16\" y2=\"16\" />\n      <line x1=\"16\" x2=\"16\" y1=\"16\" y2=\"16\" />\n    </svg>\n  ),\n  javascript: (props: IconProps) => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\" {...props}>\n      <path\n        fill=\"currentColor\"\n        d=\"M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48zM243.8 381.4c0 43.6-25.6 63.5-62.9 63.5-33.7 0-53.2-17.4-63.2-38.5l34.3-20.7c6.6 11.7 12.6 21.6 27.1 21.6 13.8 0 22.6-5.4 22.6-26.5V237.7h42.1v143.7zm99.6 63.5c-39.1 0-64.4-18.6-76.7-43l34.3-19.8c9 14.7 20.8 25.6 41.5 25.6 17.4 0 28.6-8.7 28.6-20.8 0-14.4-11.4-19.5-30.7-28l-10.5-4.5c-30.4-12.9-50.5-29.2-50.5-63.5 0-31.6 24.1-55.6 61.6-55.6 26.8 0 46 9.3 59.8 33.7L368 290c-7.2-12.9-15-18-27.1-18-12.3 0-20.1 7.8-20.1 18 0 12.6 7.8 17.7 25.9 25.6l10.5 4.5c35.8 15.3 55.9 31 55.9 66.2 0 37.8-29.8 58.6-69.7 58.6z\"\n      />\n    </svg>\n  ),\n  typescript: (props: IconProps) => (\n    <svg\n      role=\"img\"\n      viewBox=\"0 0 24 24\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path\n        fill=\"currentColor\"\n        d=\"M1.125 0C.502 0 0 .502 0 1.125v21.75C0 23.498.502 24 1.125 24h21.75c.623 0 1.125-.502 1.125-1.125V1.125C24 .502 23.498 0 22.875 0zm17.363 9.75c.612 0 1.154.037 1.627.111a6.38 6.38 0 0 1 1.306.34v2.458a3.95 3.95 0 0 0-.643-.361 5.093 5.093 0 0 0-.717-.26 5.453 5.453 0 0 0-1.426-.2c-.3 0-.573.028-.819.086a2.1 2.1 0 0 0-.623.242c-.17.104-.3.229-.393.374a.888.888 0 0 0-.14.49c0 .196.053.373.156.529.104.156.252.304.443.444s.423.276.696.41c.273.135.582.274.926.416.47.197.892.407 1.266.628.374.222.695.473.963.753.268.279.472.598.614.957.142.359.214.776.214 1.253 0 .657-.125 1.21-.373 1.656a3.033 3.033 0 0 1-1.012 1.085 4.38 4.38 0 0 1-1.487.596c-.566.12-1.163.18-1.79.18a9.916 9.916 0 0 1-1.84-.164 5.544 5.544 0 0 1-1.512-.493v-2.63a5.033 5.033 0 0 0 3.237 1.2c.333 0 .624-.03.872-.09.249-.06.456-.144.623-.25.166-.108.29-.234.373-.38a1.023 1.023 0 0 0-.074-1.089 2.12 2.12 0 0 0-.537-.5 5.597 5.597 0 0 0-.807-.444 27.72 27.72 0 0 0-1.007-.436c-.918-.383-1.602-.852-2.053-1.405-.45-.553-.676-1.222-.676-2.005 0-.614.123-1.141.369-1.582.246-.441.58-.804 1.004-1.089a4.494 4.494 0 0 1 1.47-.629 7.536 7.536 0 0 1 1.77-.201zm-15.113.188h9.563v2.166H9.506v9.646H6.789v-9.646H3.375z\"\n      />\n    </svg>\n  ),\n  bash: (props: IconProps) => (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      {...props}\n    >\n      <path d=\"M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z\" />\n      <path d=\"M14 2v4a2 2 0 0 0 2 2h4\" />\n      <path d=\"m8 16 2-2-2-2\" />\n      <path d=\"M12 18h4\" />\n    </svg>\n  ),\n  analytics: (props: IconProps) => (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      {...props}\n    >\n      <path d=\"M3 3v18h18\" />\n      <path d=\"m19 9-5 5-4-4-3 3\" />\n    </svg>\n  ),\n  dashboard: HomeIcon,\n  avatar: AvatarIcon,\n  placeholder: ImageIcon,\n  settings: GearIcon,\n  chevronLeft: ChevronLeftIcon,\n}\n","dependencies":{"local":[],"thirdParty":[{"original":"@radix-ui/react-icons","resolved":"@radix-ui/react-icons","replacedImport":"@radix-ui/react-icons","content":null,"dependencies":[],"isDynamic":false,"importType":"import"}],"dynamic":[],"require":[],"core":[]},"isDynamic":false,"importType":"import"}],"thirdParty":[{"original":"react","resolved":"react","replacedImport":"react","content":null,"dependencies":[],"isDynamic":false,"importType":"import"},{"original":"@clerk/nextjs","resolved":"@clerk/nextjs","replacedImport":"@clerk/nextjs","content":null,"dependencies":[],"isDynamic":false,"importType":"import"},{"original":"@clerk/types","resolved":"@clerk/types","replacedImport":"@clerk/types","content":null,"dependencies":[],"isDynamic":false,"importType":"import"}],"dynamic":[],"require":[],"core":[]},"isDynamic":false,"importType":"import"},{"original":"@/app/(auth)/_components/signin-form","resolved":"..\\..\\_components\\signin-form.tsx","replacedImport":"..\\..\\_components\\signin-form.tsx","content":"\"use client\"\n\nimport * as React from \"react\"\nimport { useRouter } from \"next/navigation\"\nimport { useSignIn } from \"@clerk/nextjs\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm } from \"react-hook-form\"\nimport type { z } from \"zod\"\n\nimport { showErrorToast } from \"..\\..\\..\\lib\\handle-error.ts\"\nimport { authSchema } from \"..\\..\\..\\lib\\validations\\auth.ts\"\nimport { Button } from \"..\\..\\..\\components\\ui\\button.tsx\"\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"..\\..\\..\\components\\ui\\form.tsx\"\nimport { Input } from \"..\\..\\..\\components\\ui\\input.tsx\"\nimport { Icons } from \"..\\..\\..\\components\\icons.tsx\"\nimport { PasswordInput } from \"..\\..\\..\\components\\password-input.tsx\"\n\ntype Inputs = z.infer<typeof authSchema>\n\nexport function SignInForm() {\n  const router = useRouter()\n  const { isLoaded, signIn, setActive } = useSignIn()\n  const [loading, setLoading] = React.useState(false)\n\n  // react-hook-form\n  const form = useForm<Inputs>({\n    resolver: zodResolver(authSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  })\n\n  async function onSubmit(data: Inputs) {\n    if (!isLoaded) return\n\n    setLoading(true)\n\n    try {\n      const result = await signIn.create({\n        identifier: data.email,\n        password: data.password,\n      })\n\n      if (result.status === \"complete\") {\n        await setActive({ session: result.createdSessionId })\n\n        router.push(`${window.location.origin}/`)\n      } else {\n        /*Investigate why the login hasn't completed */\n        console.log(result)\n      }\n    } catch (err) {\n      showErrorToast(err)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <Form {...form}>\n      <form className=\"grid gap-4\" onSubmit={form.handleSubmit(onSubmit)}>\n        <FormField\n          control={form.control}\n          name=\"email\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Email</FormLabel>\n              <FormControl>\n                <Input\n                  type=\"text\"\n                  placeholder=\"rodneymullen180@gmail.com\"\n                  {...field}\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"password\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Password</FormLabel>\n              <FormControl>\n                <PasswordInput placeholder=\"**********\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\" className=\"mt-2\" disabled={loading}>\n          {loading && (\n            <Icons.spinner\n              className=\"mr-2 size-4 animate-spin\"\n              aria-hidden=\"true\"\n            />\n          )}\n          Sign in\n          <span className=\"sr-only\">Sign in</span>\n        </Button>\n      </form>\n    </Form>\n  )\n}\n","dependencies":{"local":[{"original":"@/lib/handle-error","resolved":"..\\..\\..\\..\\lib\\handle-error.ts","replacedImport":"..\\..\\..\\lib\\handle-error.ts","content":null,"dependencies":[],"isDynamic":false,"importType":"import"},{"original":"@/lib/validations/auth","resolved":"..\\..\\..\\..\\lib\\validations\\auth.ts","replacedImport":"..\\..\\..\\lib\\validations\\auth.ts","content":"import * as z from \"zod\"\n\nexport const authSchema = z.object({\n  email: z.string().email({\n    message: \"Please enter a valid email address\",\n  }),\n  password: z\n    .string()\n    .min(8, {\n      message: \"Password must be at least 8 characters long\",\n    })\n    .max(100, {\n      message: \"Password must be at most 100 characters long\",\n    }),\n})\n\nexport const verifyEmailSchema = z.object({\n  code: z\n    .string()\n    .min(6, {\n      message: \"Verification code must be 6 characters long\",\n    })\n    .max(6),\n})\n\nexport const checkEmailSchema = z.object({\n  email: authSchema.shape.email,\n})\n\nexport const resetPasswordSchema = z\n  .object({\n    password: authSchema.shape.password,\n    confirmPassword: authSchema.shape.password,\n    code: verifyEmailSchema.shape.code,\n  })\n  .refine((data) => data.password === data.confirmPassword, {\n    message: \"Passwords do not match\",\n    path: [\"confirmPassword\"],\n  })\n\nexport const userPrivateMetadataSchema = z.object({\n  stripePriceId: z.string().optional().nullable(),\n  stripeSubscriptionId: z.string().optional().nullable(),\n  stripeCustomerId: z.string().optional().nullable(),\n  stripeCurrentPeriodEnd: z.string().optional().nullable(),\n})\n\nexport type UserPrivateMetadataSchema = z.infer<\n  typeof userPrivateMetadataSchema\n>\n","dependencies":{"local":[],"thirdParty":[{"original":"zod","resolved":"zod","replacedImport":"zod","content":null,"dependencies":[],"isDynamic":false,"importType":"import"}],"dynamic":[],"require":[],"core":[]},"isDynamic":false,"importType":"import"},{"original":"@/components/ui/button","resolved":"..\\..\\..\\..\\components\\ui\\button.tsx","replacedImport":"..\\..\\..\\components\\ui\\button.tsx","content":null,"dependencies":[],"isDynamic":false,"importType":"import"},{"original":"@/components/ui/form","resolved":"..\\..\\..\\..\\components\\ui\\form.tsx","replacedImport":"..\\..\\..\\components\\ui\\form.tsx","content":"import * as React from \"react\"\nimport type * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"..\\..\\lib\\utils.ts\"\nimport { Label } from \"label.tsx\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-[0.8rem] text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-[0.8rem] font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nconst UncontrolledFormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement> & {\n    message?: string\n  }\n>(({ className, children, message, ...props }, ref) => {\n  const { formMessageId } = useFormField()\n  const body = message ? String(message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nUncontrolledFormMessage.displayName = \"UncontrolledFormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  UncontrolledFormMessage,\n  FormField,\n}\n","dependencies":{"local":[{"original":"@/lib/utils","resolved":"..\\..\\..\\..\\lib\\utils.ts","replacedImport":"..\\..\\lib\\utils.ts","content":null,"dependencies":[],"isDynamic":false,"importType":"import"},{"original":"@/components/ui/label","resolved":"..\\..\\..\\..\\components\\ui\\label.tsx","replacedImport":"label.tsx","content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"..\\..\\lib\\utils.ts\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","dependencies":{"local":[{"original":"@/lib/utils","resolved":"..\\..\\..\\..\\lib\\utils.ts","replacedImport":"..\\..\\lib\\utils.ts","content":null,"dependencies":[],"isDynamic":false,"importType":"import"}],"thirdParty":[{"original":"react","resolved":"react","replacedImport":"react","content":null,"dependencies":[],"isDynamic":false,"importType":"import"},{"original":"@radix-ui/react-label","resolved":"@radix-ui/react-label","replacedImport":"@radix-ui/react-label","content":null,"dependencies":[],"isDynamic":false,"importType":"import"},{"original":"class-variance-authority","resolved":"class-variance-authority","replacedImport":"class-variance-authority","content":null,"dependencies":[],"isDynamic":false,"importType":"import"}],"dynamic":[],"require":[],"core":[]},"isDynamic":false,"importType":"import"}],"thirdParty":[{"original":"react","resolved":"react","replacedImport":"react","content":null,"dependencies":[],"isDynamic":false,"importType":"import"},{"original":"@radix-ui/react-label","resolved":"@radix-ui/react-label","replacedImport":"@radix-ui/react-label","content":null,"dependencies":[],"isDynamic":false,"importType":"import"},{"original":"@radix-ui/react-slot","resolved":"@radix-ui/react-slot","replacedImport":"@radix-ui/react-slot","content":null,"dependencies":[],"isDynamic":false,"importType":"import"},{"original":"react-hook-form","resolved":"react-hook-form","replacedImport":"react-hook-form","content":null,"dependencies":[],"isDynamic":false,"importType":"import"}],"dynamic":[],"require":[],"core":[]},"isDynamic":false,"importType":"import"},{"original":"@/components/ui/input","resolved":"..\\..\\..\\..\\components\\ui\\input.tsx","replacedImport":"..\\..\\..\\components\\ui\\input.tsx","content":"import * as React from \"react\"\n\nimport { cn } from \"..\\..\\lib\\utils.ts\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","dependencies":{"local":[{"original":"@/lib/utils","resolved":"..\\..\\..\\..\\lib\\utils.ts","replacedImport":"..\\..\\lib\\utils.ts","content":null,"dependencies":[],"isDynamic":false,"importType":"import"}],"thirdParty":[{"original":"react","resolved":"react","replacedImport":"react","content":null,"dependencies":[],"isDynamic":false,"importType":"import"}],"dynamic":[],"require":[],"core":[]},"isDynamic":false,"importType":"import"},{"original":"@/components/icons","resolved":"..\\..\\..\\..\\components\\icons.tsx","replacedImport":"..\\..\\..\\components\\icons.tsx","content":null,"dependencies":[],"isDynamic":false,"importType":"import"},{"original":"@/components/password-input","resolved":"..\\..\\..\\..\\components\\password-input.tsx","replacedImport":"..\\..\\..\\components\\password-input.tsx","content":"\"use client\"\n\nimport * as React from \"react\"\nimport { EyeNoneIcon, EyeOpenIcon } from \"@radix-ui/react-icons\"\n\nimport { cn } from \"..\\lib\\utils.ts\"\nimport { Button } from \"ui\\button.tsx\"\nimport { Input, type InputProps } from \"ui\\input.tsx\"\n\nconst PasswordInput = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, ...props }, ref) => {\n    const [showPassword, setShowPassword] = React.useState(false)\n\n    return (\n      <div className=\"relative\">\n        <Input\n          type={showPassword ? \"text\" : \"password\"}\n          className={cn(\"pr-10\", className)}\n          ref={ref}\n          {...props}\n        />\n        <Button\n          type=\"button\"\n          variant=\"ghost\"\n          size=\"sm\"\n          className=\"absolute right-0 top-0 h-full px-3 py-1 hover:bg-transparent\"\n          onClick={() => setShowPassword((prev) => !prev)}\n          disabled={props.value === \"\" || props.disabled}\n        >\n          {showPassword ? (\n            <EyeNoneIcon className=\"size-4\" aria-hidden=\"true\" />\n          ) : (\n            <EyeOpenIcon className=\"size-4\" aria-hidden=\"true\" />\n          )}\n          <span className=\"sr-only\">\n            {showPassword ? \"Hide password\" : \"Show password\"}\n          </span>\n        </Button>\n      </div>\n    )\n  }\n)\nPasswordInput.displayName = \"PasswordInput\"\n\nexport { PasswordInput }\n","dependencies":{"local":[{"original":"@/lib/utils","resolved":"..\\..\\..\\..\\lib\\utils.ts","replacedImport":"..\\lib\\utils.ts","content":null,"dependencies":[],"isDynamic":false,"importType":"import"},{"original":"@/components/ui/button","resolved":"..\\..\\..\\..\\components\\ui\\button.tsx","replacedImport":"ui\\button.tsx","content":null,"dependencies":[],"isDynamic":false,"importType":"import"},{"original":"@/components/ui/input","resolved":"..\\..\\..\\..\\components\\ui\\input.tsx","replacedImport":"ui\\input.tsx","content":null,"dependencies":[],"isDynamic":false,"importType":"import"}],"thirdParty":[{"original":"react","resolved":"react","replacedImport":"react","content":null,"dependencies":[],"isDynamic":false,"importType":"import"},{"original":"@radix-ui/react-icons","resolved":"@radix-ui/react-icons","replacedImport":"@radix-ui/react-icons","content":null,"dependencies":[],"isDynamic":false,"importType":"import"}],"dynamic":[],"require":[],"core":[]},"isDynamic":false,"importType":"import"}],"thirdParty":[{"original":"react","resolved":"react","replacedImport":"react","content":null,"dependencies":[],"isDynamic":false,"importType":"import"},{"original":"next/navigation","resolved":"next/navigation","replacedImport":"next/navigation","content":null,"dependencies":[],"isDynamic":false,"importType":"import"},{"original":"@clerk/nextjs","resolved":"@clerk/nextjs","replacedImport":"@clerk/nextjs","content":null,"dependencies":[],"isDynamic":false,"importType":"import"},{"original":"@hookform/resolvers/zod","resolved":"@hookform/resolvers/zod","replacedImport":"@hookform/resolvers/zod","content":null,"dependencies":[],"isDynamic":false,"importType":"import"},{"original":"react-hook-form","resolved":"react-hook-form","replacedImport":"react-hook-form","content":null,"dependencies":[],"isDynamic":false,"importType":"import"},{"original":"zod","resolved":"zod","replacedImport":"zod","content":null,"dependencies":[],"isDynamic":false,"importType":"import"}],"dynamic":[],"require":[],"core":[]},"isDynamic":false,"importType":"import"}],"thirdParty":[{"original":"next","resolved":"next","replacedImport":"next","content":null,"dependencies":[],"isDynamic":false,"importType":"import"},{"original":"next/link","resolved":"next/link","replacedImport":"next/link","content":null,"dependencies":[],"isDynamic":false,"importType":"import"}],"dynamic":[],"require":[],"core":[]},"content":"import { type Metadata } from \"next\"\nimport Link from \"next/link\"\nimport { env } from \"..\\..\\..\\..\\env.js\"\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"..\\..\\..\\..\\components\\ui\\card.tsx\"\nimport { Shell } from \"..\\..\\..\\..\\components\\shell.tsx\"\nimport { OAuthSignIn } from \"@/app/(auth)/_components/oauth-signin\"\nimport { SignInForm } from \"@/app/(auth)/_components/signin-form\"\n\nexport const metadata: Metadata = {\n  metadataBase: new URL(env.NEXT_PUBLIC_APP_URL),\n  title: \"Sign In\",\n  description: \"Sign in to your account\",\n}\n\nexport default function SignInPage() {\n  return (\n    <Shell className=\"max-w-lg\">\n      <Card>\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-2xl\">Sign in</CardTitle>\n          <CardDescription>\n            Choose your preferred sign in method\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"grid gap-4\">\n          <OAuthSignIn />\n          <div className=\"relative\">\n            <div className=\"absolute inset-0 flex items-center\">\n              <span className=\"w-full border-t\" />\n            </div>\n            <div className=\"relative flex justify-center text-xs uppercase\">\n              <span className=\"bg-background px-2 text-muted-foreground\">\n                Or continue with\n              </span>\n            </div>\n          </div>\n          <SignInForm />\n        </CardContent>\n        <CardFooter className=\"flex flex-wrap items-center justify-between gap-2\">\n          <div className=\"text-sm text-muted-foreground\">\n            <span className=\"mr-1 hidden sm:inline-block\">\n              Don&apos;t have an account?\n            </span>\n            <Link\n              aria-label=\"Sign up\"\n              href=\"/signup\"\n              className=\"text-primary underline-offset-4 transition-colors hover:underline\"\n            >\n              Sign up\n            </Link>\n          </div>\n          <Link\n            aria-label=\"Reset password\"\n            href=\"/signin/reset-password\"\n            className=\"text-sm text-primary underline-offset-4 transition-colors hover:underline\"\n          >\n            Reset password\n          </Link>\n        </CardFooter>\n      </Card>\n    </Shell>\n  )\n}\n","resolves":["..\\..\\..\\..\\env.js","..\\..\\..\\..\\components\\ui\\card.tsx","..\\..\\..\\..\\lib\\utils.ts","..\\..\\..\\..\\components\\shell.tsx","..\\..\\_components\\oauth-signin.tsx","..\\..\\..\\..\\lib\\handle-error.ts","..\\..\\..\\..\\lib\\constants.ts","..\\..\\..\\..\\components\\ui\\button.tsx","..\\..\\..\\..\\components\\icons.tsx","..\\..\\_components\\signin-form.tsx","..\\..\\..\\..\\lib\\validations\\auth.ts","..\\..\\..\\..\\components\\ui\\form.tsx","..\\..\\..\\..\\components\\ui\\label.tsx","..\\..\\..\\..\\components\\ui\\input.tsx","..\\..\\..\\..\\components\\password-input.tsx"],"thirdParties":["next","@t3-oss/env-nextjs","zod","react","@clerk/nextjs","clsx","tailwind-merge","class-variance-authority","@clerk/types","sonner","@radix-ui/react-slot","@radix-ui/react-icons","@hookform/resolvers","react-hook-form","@radix-ui/react-label"],"coreModules":[],"envVariables":{"importMeta":[],"process":[]}}